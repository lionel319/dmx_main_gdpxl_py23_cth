#!/usr/bin/env python

import os
import sys
import logging
from pprint import pprint
from datetime import datetime
import json

rootdir = '/nfs/site/disks/da_infra_1/users/yltan/depot/da/infra/dmx/main/lib/python'
#rootdir = '/p/psg/flows/common/dmx/13.0/lib/python'
sys.path.insert(0, rootdir)

rootdir = '/nfs/site/disks/da_infra_1/users/yltan/depot/da/infra/cicq/main/lib'
#rootdir = '/p/psg/flows/common/dmx/13.0/lib/python'
sys.path.insert(0, rootdir)

import dmx.utillib.utils
import dmx.utillib.loggingutils
import dmx.utillib.diskutils
import dmx.ecolib.ecosphere

LOGGER = dmx.utillib.loggingutils.setup_logger(level=logging.INFO)


def main():
    ### TODO:
    ### We want the script to be called in the following manner:
    ###     >ssbuild_ip_prep.py -p <project> -i <ip>  
    ### The script comes with the following options:-
    ###     --autocheckin   : will automatically check in (run icmp4 add + submit) upon completion.
    ###     --deliverables  : will only process the given list of deliverables, instead of all deliverables.
    
    project = 'i10socfm'
    variant = 'liotest1'


    ### TODO: 
    ### Check and make sure project/variant iptype contains keyword 'ssbuild'
    ### if not, exist. We only allow this script to be ran on iptypes *ssbuild*

    e = dmx.ecolib.ecosphere.EcoSphere()   
    f = e.get_family(os.getenv("DB_FAMILY"))
    ip = f.get_ip(variant, project)
    cells = ip.get_cells()
    ds = ip.get_deliverables()
    for d in ds:
        libtype = d.name

        ### Skip for ipspec
        if libtype == 'ipspec':
            continue

        cs = d.get_checkers()
        for c in cs:
            print "==========================================="
            print "Working on {}/{} ...".format(c.flow, c.subflow)

            for cell in cells:
                ### Generate empty *.f file
                if c.subflow:
                    filename = 'audit.{}.{}_{}.f'.format(cell.name, c.flow, c.subflow)
                else:
                    filename = 'audit.{}.{}.f'.format(cell.name, c.flow)
                auditfile = os.path.join(e._workspaceroot, variant, libtype, 'audit', filename)
                print auditfile

                ### Generate tnrwaivers.csv file
                patterns = d.get_patterns(ip=variant, cell=cell.name)
                for p in patterns:
                    if patterns[p]['optional'] == False:
                        line = '{},{},type,Auto-generated by jemi.py for ss_build iptype,"pattern file {} does not exist."'.format(variant, d.name, p)
                        print line
     
    ### TODO:
    ### Run 'dmx workspace check' for all libtypes
    ### - make sure that this line is found in the stdout
    ###   > ERRORS NOT WAIVED          : 0

    ### TODO:
    ### Run 'dmx workspace check' for the variant
    ### - make sure that this line is found in the stdout
    ###   > ERRORS NOT WAIVED          : 0

    ### TODO:
    ### if there is any discrepancy, report the errors
    ### else: icmp4 add and submit all the files

if __name__ == '__main__':
    main()


