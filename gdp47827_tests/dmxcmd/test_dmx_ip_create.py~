#!/usr/bin/env python
# 2014 Altera Corporation. All rights reserved. This source code is highly
# confidential and proprietary information of Altera and is to be used for
# internal Altera purposes only.   Altera assumes no responsibility or
# liability arising out of the application or use of this source code for
# non-Altera purposes.
#
# Tests the abnr icm library
#
# $File: //depot/da/infra/dmx/main_gdpxl_py23_cth/gdp47827_tests/dmxcmd/test_dmx_ip_create.py $
# $Revision: #1 $
# $Change: 7411538 $
# $DateTime: 2022/12/13 18:19:49 $
# $Author: lionelta $

from __future__ import print_function
import unittest
import inspect
import os
import sys

LIB = os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(os.path.realpath(__file__)))), 'lib', 'python')
sys.path.insert(0, LIB)
import dmx.utillib.utils

class TestDmxIpCreate(unittest.TestCase):
    def setUp(self):
        self.dmx = os.path.join(LIB, '..', '..', 'bin', 'dmx.py')
        self.rc = dmx.utillib.utils.run_command
        self.setsite = 'env DMX_GDPSITE=intel DB_DEVICE=FM6 '
        self.setsite = 'env DB_THREAD=RTMrevA0 DB_DEVICE=RTM DB_FAMILY=Ratonmesa '
        
    def tearDown(self):
        pass
    
    def test_001___dmx_ip_create___already_exist(self):
        exitcode, stdout, stderr = self.rc('{} {} ip create -p Raton_Mesa -i rtmliotest1 --type fc'.format(self.setsite, self.dmx), maxtry=1)
        print("exitcode: {}\nstdout: {}\nstderr: {}\n".format(exitcode, stdout, stderr))
        self.assertIn("ERROR: Variant rtmliotest1 already exists in project Raton_Mesa", stderr)

    def test_002___dmx_ip_create___invalid_project(self):
        exitcode, stdout, stderr = self.rc('{} {} ip create -p xxxxxxxx -i liotest1 --type fc'.format(self.setsite, self.dmx), maxtry=1)
        print("exitcode: {}\nstdout: {}\nstderr: {}\n".format(exitcode, stdout, stderr))
        self.assertIn("is not a valid project", stderr)

    def test_003___dmx_ip_create___invalid_admin_owner(self):
        exitcode, stdout, stderr = self.rc('{} {} ip create -p Raton_Mesa -i xxxxxx --type fc --owner lionelta'.format(self.setsite, self.dmx), maxtry=1)
        print("exitcode: {}\nstdout: {}\nstderr: {}\n".format(exitcode, stdout, stderr))
        self.assertIn("is not allowed to be an owner of an IP as he/she is a DMX admin", stderr)

    def test_004___dmx_ip_create___invalid_type(self):
        exitcode, stdout, stderr = self.rc('{} {} ip create -p Raton_Mesa -i xxxxxx --type zzzzz --owner jwquah'.format(self.setsite, self.dmx), maxtry=1)
        print("exitcode: {}\nstdout: {}\nstderr: {}\n".format(exitcode, stdout, stderr))
        self.assertIn("IPType zzzzz does not exist", stderr)

    def test_005___dmx_ip_create___successful_preview(self):
        exitcode, stdout, stderr = self.rc('{} {} ip create -p Raton_Mesa -i xxxxxx --type soft_macro --owner jwquah -n '.format(self.setsite, self.dmx), maxtry=1)
        print("exitcode: {}\nstdout: {}\nstderr: {}\n".format(exitcode, stdout, stderr))
        self.assertIn("Creating configuration:", stderr)
        self.assertIn("Updating configuration", stderr)



if __name__ == '__main__':
    unittest.main()
