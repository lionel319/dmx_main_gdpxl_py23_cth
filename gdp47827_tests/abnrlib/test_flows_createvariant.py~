#!/usr/bin/env python
# 2014 Altera Corporation. All rights reserved. This source code is highly
# confidential and proprietary information of Altera and is to be used for
# internal Altera purposes only.   Altera assumes no responsibility or
# liability arising out of the application or use of this source code for
# non-Altera purposes.
#
# Tests the abnr utils library
#
# $File: //depot/da/infra/dmx/main_gdpxl_py23_cth/gdp47827_tests/abnrlib/test_flows_createvariant.py $
# $Revision: #1 $
# $Change: 7411538 $
# $DateTime: 2022/12/13 18:19:49 $
# $Author: lionelta $

import unittest
from mock import patch
from datetime import date
import os, sys
import logging
import socket
import datetime
from pprint import pprint

LIB = os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(os.path.realpath(__file__)))), 'lib', 'python')
sys.path.insert(0, LIB)

import dmx.utillib.loggingutils
LOGGER = dmx.utillib.loggingutils.setup_logger(level=logging.DEBUG)
import dmx.abnrlib.icm
import dmx.abnrlib.flows.createvariant

class TestFlowsOwner(unittest.TestCase):

    def setUp(self):
        self.cv = dmx.abnrlib.flows.createvariant.CreateVariant

    def test_001___createvariant___illegal_ip_name(self):
        p = 'Raton_Mesa'
        v = 'nul'
        t = 'fc'
        with self.assertRaisesRegexp(Exception, 'IP\(Variant\) name is illegal'):
            self.cv(p, v, t)

    def test_002___createvariant___illegal_prefix(self):
        p = 'Raton_Mesa'
        v = 'fc0liontest1'
        t = 'fc'
        with self.assertRaisesRegexp(Exception, 'IP\(Variant\) name cannot begin with'):
            self.cv(p, v, t)

    @patch('dmx.utillib.admin.is_admin')
    @patch.object(dmx.abnrlib.flows.createvariant, 'is_admin')
    def test_003___createvariant___illegal_type_by_non_admin(self, m1, m2):
        p = 'Raton_Mesa'
        v = 'xxxxxxxxxx'
        t = 'asicustom'
        m1.return_value = False
        m2.return_value = False 
        with self.assertRaisesRegexp(Exception, 'Variant type asicustom is not allowed'):
            self.cv(p, v, t)

    @patch('dmx.utillib.admin.is_admin')
    @patch.object(dmx.abnrlib.flows.createvariant, 'is_admin')
    def test_004___createvariant___illegal_by_admin(self, m1, m2):
        p = 'Raton_Mesa'
        v = 'xxxxxxxxxx'
        t = 'asicustom'
        m1.return_value = True
        m2.return_value = True
        with self.assertRaisesRegexp(Exception, 'is not allowed to be an owner of an IP as he/she is a DMX admin'):
            self.cv(p, v, t)

    @patch('dmx.utillib.admin.is_admin')
    @patch.object(dmx.abnrlib.flows.createvariant, 'is_admin')
    def test_005___createvariant___ip_exist(self, m1, m2):
        p = 'Raton_Mesa'
        v = 'rtmliotest1'
        t = 'fc'
        m1.return_value = False
        m2.return_value = False
        with self.assertRaisesRegexp(Exception, 'Variant rtmliotest1 already exists'):
            self.cv(p, v, t)

    @patch('dmx.utillib.admin.is_admin')
    @patch.object(dmx.abnrlib.flows.createvariant, 'is_admin')
    def test_006___createvariant___illegal_user(self, m1, m2):
        p = 'Raton_Mesa'
        v = 'xxxxxxxxxxx'
        t = 'fc'
        m1.return_value = False
        m2.return_value = False
        with self.assertRaisesRegexp(Exception, 'is not a valid username'):
            self.cv(p, v, t, owner='xxxxxxxxxxx')

    @patch('dmx.utillib.admin.is_admin')
    @patch.object(dmx.abnrlib.flows.createvariant, 'is_admin')
    def test_006___createvariant___prefix_conflict(self, m1, m2):
        p = 'Raton_Mesa'
        v = 'rtmliotest1_xxx'
        t = 'fc'
        m1.return_value = False
        m2.return_value = False
        with self.assertRaisesRegexp(Exception, 'Variant rtmliotest1_xxx has conflict prefix'):
            self.cv(p, v, t)


if __name__ == '__main__':
    unittest.main()
