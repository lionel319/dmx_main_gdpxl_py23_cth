#!/usr/bin/env python

import os
import sys
import json
from pprint import pprint
import textwrap
import logging

sys.path.insert(0, os.getenv("DMX_LIB"))
from dmx.abnrlib.command import Command 
from dmx.utillib.utils import add_common_args
import dmx.utillib.cthdmxpocutils as cdpu
import dmx.tnrlib.audit_check
from dmx.tnrlib.test_result import TestResult, TestFailure
from dmx.tnrlib.waiver_file import WaiverFile
import dmx.ecolib.ecosphere

class TestRunnerPoc():

    def __init__(self, thread=None, milestone=None, deliverable=None, workspace_root=None):

        self.logger = logging.getLogger(__name__)

        if not workspace_root:
            self.workspace_root = os.getenv("WORKAREA")
        else:
            self.workspace_root = workspace_root
        self.thread = thread
        self.milestone = milestone
        self.deliverable = deliverable
        self.test_results = []
        self.tests_failed = []
        self.dmxdata = None
        self._required_checkers = []

        self._errors = {'waived':[], 'unwaived':[]}
        self._waiverfile = None
        self._exit_code = 0

    def get_required_checkers(self):
        eco = dmx.ecolib.ecosphere.EcoSphere(workspaceroot='dummy')
        family = eco.get_family_for_thread(self.thread)
        deliverable = family.get_deliverable(self.deliverable)
        #get_checkers(self, flow_filter = '', subflow_filter = '', checker_filter = '', milestone = '99', roadmap = '', iptype_filter='', prel_filter=''):
        checkers = deliverable.get_checkers(milestone=self.milestone)
        return checkers

    def get_cells(self):
        retval = []
        with open(os.path.join(self.workspace_root, 'psg', 'ipspec', 'cell_names.txt')) as f:
            for line in f:
                if not line.isspace() and line:
                    retval.append(line.strip())
        return retval


    #========================================================

    def run_tests(self):
        af = dmx.tnrlib.audit_check.AuditFile(workspace_rootdir=self.workspace_root, update_dashboard=False, thread=self.thread, milestone=self.milestone)
        aftemp = dmx.tnrlib.audit_check.AuditFile(workspace_rootdir=self.workspace_root, update_dashboard=False, thread=self.thread, milestone=self.milestone)
        for checker in self.get_required_checkers():
            flow = checker.flow
            subflow = checker.subflow
            for cell in self.get_cells():
                aftemp.set_test_info(flow, subflow, 'rundir', 'cmdline', self.deliverable, cell, variant='NA')
                audit_filepath = aftemp.get_audit_file_path()
                try:
                    af.load(audit_filepath)
                    failures = af.run_audit()
                    self.log_test_failures(failures)
                except Exception as e:
                    #logger.debug("Caught an Exception during audit validation: {}".format(str(e)))
                    self.log_test_fail(flow=flow, subflow=subflow, topcell=cell, libtype=self.deliverable, error='UNWAIVABLE Exception validating audit log {}: {}'.format(audit_filepath, str(e)))
                
        return self.tests_failed

    def log_test_pass(self, flow, message, variant=None, libtype=None, topcell='', subflow=''):
        """
        Adds a "pass" TestResult to the list of results for this run which can be used for reporting.
        """
        if variant is None:
            variant=self.variant 
        if libtype is None:
            libtype=self.libtype

        result = TestResult('pass', variant, libtype, topcell, flow, subflow, message)
        self.test_results.append(result)

    def log_test_skip(self, flow, message, variant=None, libtype=None, topcell='', subflow=''):
        """
        Adds a "skip" TestResult to the list of results for this run which can be used for reporting.
        """
        if variant is None:
            variant=self.variant 
        if libtype is None:
            libtype=self.libtype

        result = TestResult('skip', variant, libtype, topcell, flow, subflow, message)
        self.test_results.append(result)
        
    def log_test_fail(self, flow, error, variant=None, libtype=None, topcell='', subflow=''):
        """
        Adds a "fail" TestResult to the list of results for this run which can be used for reporting.

        Also adds a TestFailure to the list of failed tests for this run.
        """
        if not variant:
            variant = 'None'
        if not libtype:
            libtype = 'None'

        if 'Could not find any audit file' in error:
            error += ' (UNWAIVABLE)'


        clean_error = self.remove_workspace_from_filepath(error)

        failure = TestFailure(variant, libtype, topcell, flow, subflow, clean_error)
        self.tests_failed.append(failure)

        result = TestResult('fail', variant, libtype, topcell, flow, subflow, clean_error)
        self.test_results.append(result)

    def log_test_failures(self, failures):
        """
        For each TestFailure in the given list, logs a failure for this run.
        This helps ensure all failures are logged as both TestFailures and
        TestResults.
        """
        for (variant, libtype, topcell, flow, subflow, error) in failures:
            self.log_test_fail(flow=flow, error=error, variant=variant, libtype=libtype, topcell=topcell, subflow=subflow)

    def remove_workspace_from_filepath(self, str):
        """
        We can't put the workspace path in any failures
        as then waivers would never work!
        """
        return str.replace(self.workspace_root, '').replace('\n',' ').replace("'","").replace('"','')


    def load_waiverfile(self):
        if self._waiverfile:
            return self._waiverfile

        waiverfilepath = os.path.join(self.workspace_root, 'psg', 'reldoc', 'tnrwaivers.csv')
        self._waiverfile = WaiverFile()
        self._waiverfile.load_from_file(waiverfilepath)
        return self._waiverfile



    def find_matching_waiver(self, variant, flow, subflow, error):
        wf = self.load_waiverfile()
        return wf.find_matching_waiver(variant, flow, subflow, error) 


    def report_errors(self, errors):
        '''
        Reports the TestFailure objects sorted by
        - flow, subflow, variant, libtype, topcell, error
        TestFailure object == TestFailure(variant=u'an', libtype='lint', topcell='', flow='deliverable', subflow='type', error='VP/templateset not yet available')
        '''
        
        sum = {'failed':0, 'hsdeswaived':0, 'cmdwaived':0, 'webwaived':0, 'total':0}

        errmsg = ''
        waivemsg = ''
        if errors:
            errors = sorted(errors, key=lambda e: (e.flow, e.subflow, e.variant, e.libtype, e.topcell, e.error))
            errmsg = "cthdmxpoc cthdmxpoc wscheck completed with errors found!\n"
            
            for num, err in enumerate(errors):
            
                if err.error:
                    matched_waiver = self.find_matching_waiver(err.variant, err.flow, err.subflow, err.error)
                    matched_hsdes_waiver = self.find_matching_waiver(err.variant, err.flow, err.subflow, err.error)

                    if not matched_waiver and not matched_hsdes_waiver:
                        sum['failed'] += 1
                        sum['total'] += 1
                        if err.topcell:
                            errmsg += "  {}: {} {} for {}: {}\n".format(sum['failed'], err.flow, err.subflow, err.topcell, err.error)
                        else:
                            errmsg += "  {}: {} {}: {}\n".format(sum['failed'], err.flow, err.subflow, err.error)
                        
                        self._errors['unwaived'].append(err)

                    elif matched_waiver:
                        if 'CommandLine' in matched_waiver:
                            sum['cmdwaived'] += 1
                            sum['total'] += 1
                        else:
                            sum['webwaived'] += 1
                            sum['total'] += 1
                        waivemsg += "  {}: {} {}: {}\n".format(sum['cmdwaived']+sum['webwaived'], err.flow, err.subflow, err.error)

                        self._errors['waived'].append(err)

                    elif matched_hsdes_waiver:
                        if 'HsdesWaiver' in matched_hsdes_waiver:
                            sum['hsdeswaived'] += 1
                            sum['total'] += 1
                        else:
                            sum['webwaived'] += 1
                            sum['total'] += 1
                        waivemsg += "  {}: {} {}: {}\n".format(sum['hsdeswaived']+sum['webwaived'], err.flow, err.subflow, err.error)

                        self._errors['waived'].append(err)


            errmsg += textwrap.dedent("""
            Tests are based on this list of checkers: http://goto/psg_roadmap
            Please consult that site for documentation, owners and ready status of the checkers.
            If you get a missing audit log failure and the corresponding check is marked "not ready" on the web site, 
            please continue with your release. Automatic waivers are created for not ready checks, so that failure
            will not prevent the release. You will need to re-release once the checker is ready.
            ------------------------
            WORKAREA: {}
            ------------------------
            """.format(os.getenv("WORKAREA")))
        else:
            errmsg = "cthdmxpoc wscheck completed with no errors!\n"
        
        if waivemsg:
            errmsg += textwrap.dedent("""
            ========================================================
            ============= These are the Waived errors. ============= 
            ========================================================
            """)
            errmsg += waivemsg

        errmsg += textwrap.dedent("""
        ===================================
        ============= SUMMARY =============
        ===================================
        ERRORS NOT WAIVED          : {failed}
        ERRORS WITH HSDES WAIVED   : {hsdeswaived}
        ERRORS WITH CMDLINE WAIVED : {cmdwaived}
        ERRORS WITH SW-WEB  WAIVED : {webwaived}
        ===================================
        TOTAL ERRORS FOUND         : {total}
        ===================================
        """.format(**sum))
        self.logger.info(errmsg)

        # http://pg-rdjira:8080/browse/DI-779
        # 0 = check executed and no error found
        # 1 = (check executed and error found) or (system error)
        if int(sum['failed']) > 0:
            self._exit_code = 1
        self.report_message = errmsg

        return errmsg

    def get_rel_name(self, project, variant, deliverable, milestone, thread, label=None, views=None, skipmscheck=None, prel=None):
        import dmx.tnrlib.release_runner
        import argparse
        args = argparse.ArgumentParser()
        args.configuration = args.work_dir = args.dont_create_rel = None
        rr = dmx.tnrlib.release_runner.ReleaseRunner(args)
        relname = rr.get_rel_config_name(project, variant, deliverable, milestone, thread, label=label, views=views, skipmscheck=skipmscheck, prel=prel)
        return relname

    def make_rel_config(self, project, variant, milestone, thread, libtype=None, label=None, views=None, skipmscheck=None, prel=None, syncpoint=None, skipsyncpoint=None):
        relname = self.get_rel_name(project, variant, libtype, milestone, thread, label=label, views=views, skipmscheck=skipmscheck, prel=prel)
        self.logger.info("relconfig tobe created: {}".format(relname))
        import dmx.abnrlib.config_factory
        dev = dmx.abnrlib.config_factory.ConfigFactory.create_from_icm(project, variant, 'dev', libtype=libtype)

        rel = dev.clone(relname)
        rel.add_property('Owner', os.getenv("USER"))
        rel.add_property("IP_MODEL", os.path.realpath(os.getenv("WORKAREA")))
        #rel.add_property('DMX_Version', self.versionobj.dmx)
        #rel.add_property('DMXDATA_Version', self.versionobj.dmxdata)

        ### http://pg-rdjira:8080/browse/DI-1401
        ### Add --views into property
        viewlabel = ''
        if views:
            # eg: views=['view_rtl', 'view_phys'], ==> 'RTL,PHYS'
            viewlabel = ','.join([v[5:] for v in views]).upper()
            rel.add_property("RELEASEVIEWS", viewlabel)
        ### http://pg-rdjira:8080/browse/DI-1061
        if syncpoint:
            rel.add_property("SYNCPOINT", self.request.syncpoint)
        if skipsyncpoint:
            rel.add_property("SKIPSYNCPOINT", self.request.skipsyncpoint)
        ### http://pg-rdjira:8080/browse/DI-1176
        if skipmscheck:
            rel.add_property("SKIPMSCHECK", self.request.skipmscheck)

        success = rel.save(shallow=True)

        if success:
            self.logger.info("Successfully created release configuration %s" % relname) 
            
        return rel_config_name

