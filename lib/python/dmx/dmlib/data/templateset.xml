<?xml version="1.0" encoding="utf-8"?>
<templateset author="kwlim" date="2016-06-21" id="example" version="nd5/2.40rc1">
  <!--Altera Data Management templateset
     This file is generated by the `templateset` program.
     See http://sw-web2/tools.ice/icd_cad/dm/nd5/2.40rc1/doc/templateset.html

     Altera Confidential and Proprietary.
     Copyright 2013-2014 Altera Corporation.
-->
  <template caseid="205257" id="BCMRBC">
    <description>
      BCMRBC exists to describe configuration and constraint rules developed by the designer during their design. The BCM will comply with the XML format and will be verified by BCM tool. RBC will be in System Verilog format and will also be verified by BCM Tool. Audit files are also delivered in accordance with the Audit checks defined for this deliverable. Requirement of an audit check for this deliverable is still under evaluation. DOC: http://rd/ice/product/Nadder/NadderPlanning/Shared%20Documents/Release%20Management/Deliverables/BCMRBC_Definition.docx
    </description>
    <pattern id="bcm" mimetype="text/xml">
      ip_name;/bcmrbc/cell_name;.bcm.xml
    </pattern>
    <pattern id="di" minimum="0">
      ip_name;/bcmrbc/....di.filelist
    </pattern>
    <pattern id="rbc">
      ip_name;/bcmrbc/cell_name;.rbc.sv
    </pattern>
    <pattern id="config" minimum="0">
      ip_name;/bcmrbc/addbcm.config
    </pattern>
    <pattern id="subconfig" minimum="0">
      ip_name;/bcmrbc/*.bcm_substitute.config
    </pattern>
    <producer id="ICD-IP"/>
    <consumer id="IPD"/>
    <consumer id="SOFTWARE"/>
    <consumer id="IP-DV"/>
    <consumer id="FCV"/>
    <consumer id="TE"/>
  </template>
  <template caseid="205259" id="CDC">
    <description>
      CDC is needed to detect clock domain crossing issues, which might cause functional or timing failures not detect-able by logic or timing simulation. SpyGlass CDC tool is used to detect CDC issues in all ASIC blocks. Deliverables are constraint (SGDC), waivers and log file. They are not directly consumed by other deliverables. They are there to check for CDC issues and make sure these are addressed. DOC: http://rd/ice/product/Nadder/NadderPlanning/Shared%20Documents/Release%20Management/Deliverables/CDC_Definition.docx
    </description>
    <pattern id="rpt">
      ip_name;/cdc/*/reports/*.moresimple.rpt
    </pattern>
    <pattern id="cfg">
      ip_name;/cdc/*/cell_name;.cfg
    </pattern>
    <pattern id="prj">
      ip_name;/cdc/*/cell_name;.prj
    </pattern>
    <pattern id="sgdc">
      ip_name;/cdc/*/cell_name;*.sgdc
    </pattern>
    <pattern id="swl" minimum="0">
      ip_name;/cdc/*/cell_name;*.swl
    </pattern>
    <producer id="ICD-IP"/>
  </template>
  <template caseid="209050" id="CDL">
    <description>
      The CDL deliverable exists to store: 1. Netlist for Physical Verifications (PV) a. Based on /ipspec/cell_names.txt 2. audit.lt;amp;cell_namegt;.cdl.f 3. audit.lt;amp;cell_namegt;.cdl.OA.xml 4. audit.lt;amp;cell_namegt;.cdl.netlist.xml 5. lt;amp;cell_namegt;.cdl.log DOC: http://rd/ice/product/Nadder/NadderPlanning/Shared%20Documents/Release%20Management/Deliverables/CDL_Definition.docx
    </description>
    <pattern id="cdl">
      ip_name;/cdl/cell_name;.cdl
    </pattern>
    <producer id="ICD-IP"/>
    <consumer id="LAY-IP"/>
    <consumer id="ICD-PD"/>
  </template>
  <template caseid="209037" id="CIRCUITSIM">
    <description>
      This deliverable is used for capture the circuit simulation with spice like tool. One must have is powerup simulation. DOC: http://rd/ice/product/Nadder/NadderPlanning/Shared%20Documents/Release%20Management/Deliverables/CIRCUITSIM_Definition.docx
    </description>
    <pattern id="functional">
      ip_name;/circuitsim/functional/*
    </pattern>
    <pattern id="power">
      ip_name;/circuitsim/power/*
    </pattern>
    <pattern id="powerup">
      ip_name;/circuitsim/powerup/*
    </pattern>
    <pattern id="speed">
      ip_name;/circuitsim/speed/*
    </pattern>
    <pattern id="sms">
      ip_name;/circuitsim/sms/*
    </pattern>
    <producer id="ICD-IP"/>
    <consumer id="ICD-PD"/>
  </template>
  <template caseid="206838" id="COMPLIB">
    <description>
      The Componet Library (COMPLIB) deliverable provides specifc information in a compact database form (.dmz) for each IP. The DMZ component is used for logical connectivity, physical implementation of the IP, and integration of the IP into higher levels of the design hierarchy. Each IP within the ICM tree is compiled into its own DMZ component. DMZ components are combined by means of a DMZ utility to produce a merged DMZ Component library containing a set of IPs within the ICM tree. Only the merged library is consumed by other deliverables. DOC: http://rd/ice/product/Nadder/NadderPlanning/Shared%20Documents/Release%20Management/Deliverables/COMPLIB_Definition.docx
    </description>
    <pattern id="file" mimetype="application/octet-stream">
      ip_name;/complib/*.dmz
    </pattern>
    <producer id="ICD-IP"/>
    <consumer id="ICD-PD"/>
    <consumer id="IPD"/>
    <consumer id="SOFTWARE"/>
    <consumer id="TE"/>
  </template>
  <template caseid="234535" id="COMPLIBPHYS">
    <description>
      The Componet Library Physical(COMPLIBPHYS) deliverable provides additional physical design information from the logical for each IP. COMPLIBPHY continues development of the DMZ component containing all the logical information from COMPLIB and adding to it. The physical information in a DMZ component is used for, physical implementation of the IP, and integration of the IP into higher levels of the design hierarchy. Each IP within the ICM tree is compiled into its own DMZ component. DMZ components are combined by means of a DMZ utility to produce a merged DMZ Component library containing a set of IPs within the ICM tree. Only the merged library is consumed by other deliverables. DOC: http://rd/ice/product/Nadder/NadderPlanning/Shared%20Documents/Release%20Management/Deliverables/COMPLIBPHYS_Definition.docx
    </description>
    <pattern id="file" mimetype="application/octet-stream">
      ip_name;/complibphys/*.dmz
    </pattern>
    <producer id="ICD-IP"/>
    <consumer id="ICD-PD"/>
    <consumer id="IPD"/>
    <consumer id="SOFTWARE"/>
    <consumer id="TE"/>
  </template>
  <template caseid="209035" id="CVIMPL">
    <description>
      CVIMPL exists to collect timing constraints developed by the physical design engineer/Backend engineer during implementation of the design. The constraints will comply with the industry standard Synopsys Design Constraint format and will be vetted using the Fishtail tool flows. For each mode, one SDC file will be delivered to run the STA flow in R2G2. Some of the timing constraints could be in TCL format and sourced from within the SDC file. Source constraints will come from the CVRTL deliverable. The implementation engineer is responsible to define/find these constraints if not supplied. There are points in the design process where it is expected that CVIMPL will NOT be provided. If no CVIMPL constraints are supplied to the Implementation team, they can use CVRTL constraints as a placeholder by copying them into the CVIMPL directory for use in R2G2. (Please consult R2G2 documentation for additional help) These constraints MUST NOT be checked in to the CVIMPL deliverable unless verified by FISHTAIL. If supplied in the ICM workspace, the CVIMPL constraints are expected to be FISHTAIL verified and used for PnR. The verified constraints in CVIMPL will be used by physical implementation tools like Synopsys ICC. Audit files are also delivered in accordance with the Audit checks defined for this deliverable. Requirement of an audit check for this deliverable is still under evaluation. DOC: http://rd/ice/product/Nadder/NadderPlanning/Shared%20Documents/Release%20Management/Deliverables/CVIMPL_Definition.docx
    </description>
    <filelist id="sdc_filelist" minimum="0">
      ip_name;/cvimpl/constraints/cell_name;.sdc.filelist
    </filelist>
    <pattern id="csdc">
      ip_name;/cvimpl/constraints/cell_name;.*.sdc
    </pattern>
    <pattern id="sdc" minimum="0">
      ip_name;/cvimpl/constraints/*/*.sdc
    </pattern>
    <pattern id="tcl" minimum="0">
      ip_name;/cvimpl/constraints/*/*.tcl
    </pattern>
    <pattern id="waivers" minimum="0">
      ip_name;/cvimpl/waivers/*.waive.tcl
    </pattern>
    <pattern id="rpt" minimum="0">
      ip_name;/cvimpl/results/cell_name;_*.rpt
    </pattern>
    <producer id="ICD-IP"/>
    <consumer id="ICD-IP"/>
    <consumer id="SPNR"/>
    <consumer id="ICD-PD"/>
  </template>
  <template caseid="205261" id="CVRTL">
    <description>
      CVRTL exists to collect timing constraints developed by the designer during RTL design. The constraints will comply with the industry standard Synopsys Design Constraint format and will be vetted using the Fishtail tool flows. For each mode, one SDC file will be delivered to run the STA flow in R2G2. Some of the timing constraints could be in TCL format and sourced from within the SDC file. Audit files are also delivered in accordance with the Audit checks defined for this deliverable. Requirement of an audit check for this deliverable is still under evaluation. DOC: http://rd/ice/product/Nadder/NadderPlanning/Shared%20Documents/Release%20Management/Deliverables/CVRTL_Definition.docx
    </description>
    <filelist id="sdc_filelist" minimum="0">
      ip_name;/cvrtl/constraints/cell_name;.sdc.filelist
    </filelist>
    <pattern id="csdc">
      ip_name;/cvrtl/constraints/cell_name;.*.sdc
    </pattern>
    <pattern id="sdc" minimum="0">
      ip_name;/cvrtl/constraints/*/*.sdc
    </pattern>
    <pattern id="tcl" minimum="0">
      ip_name;/cvrtl/constraints/*/*.tcl
    </pattern>
    <pattern id="waivers" minimum="0">
      ip_name;/cvrtl/waivers/*.waive.tcl
    </pattern>
    <pattern id="rpt" minimum="0">
      ip_name;/cvrtl/results/cell_name;_*.rpt
    </pattern>
    <producer id="ICD-IP"/>
    <consumer id="ICD-IP"/>
    <consumer id="ICD-PD"/>
  </template>
  <template caseid="209036" id="CVSIGNOFF">
    <description>
      CVSIGNOFF exists to collect timing constraints developed by the designer for signing off the design. The constraints will comply with the industry standard 'Synopsys Design Constraint' format and will be vetted using the Fishtail tool flows. An SDC filelist will be delivered which will point to one or more constraint (SDC) files. Some of the timing constraints could be in TCL format. Source constraints will come from the CVRTL and CVSIGNOFF deliverables. These timing constraints will be saved in CVSIGNOFF, verified using Fishtail and then read into Synopsys Primetime for timing analysis and timing signoff. Audit files are also delivered in accordance with the Audit checks defined for this deliverable. Requirement of an audit check for this deliverable is still under evaluation. DOC: http://rd/ice/product/Nadder/NadderPlanning/Shared%20Documents/Release%20Management/Deliverables/CVSIGNOFF_Definition.docx
    </description>
    <filelist id="sdc_filelist" minimum="0">
      ip_name;/cvsignoff/constraints/cell_name;.sdc.filelist
    </filelist>
    <pattern id="csdc">
      ip_name;/cvsignoff/constraints/cell_name;.*.sdc
    </pattern>
    <pattern id="sdc" minimum="0">
      ip_name;/cvsignoff/constraints/*/*.sdc
    </pattern>
    <pattern id="tcl" minimum="0">
      ip_name;/cvsignoff/constraints/*/*.tcl
    </pattern>
    <pattern id="waivers" minimum="0">
      ip_name;/cvsignoff/waivers/*.waive.tcl
    </pattern>
    <pattern id="rpt" minimum="0">
      ip_name;/cvsignoff/results/cell_name;_*.rpt
    </pattern>
    <producer id="ICD-IP"/>
    <consumer id="ICD-IP"/>
    <consumer id="SPNR"/>
    <consumer id="ICD-PD"/>
  </template>
  <template caseid="216062" id="DFTDSM">
    <description>
      Spyglass DFT is used to detect any scanability, testability or coverage issues at RTL level. SpyGlass DFT tool is used to check on the RTL in all ASIC IPs before synthesis. Deliverables are constraint (SGDC), filelist, report file and waiver. It enables early detection of potential testability issues which can be addressed at the earlier stages of the design cycle. DOC: http://rd/ice/product/Nadder/NadderPlanning/Shared%20Documents/Release%20Management/Deliverables/DFTDSM_Definition.docx
    </description>
    <filelist id="filelist">
      ip_name;/dftdsm/cell_name;.f
    </filelist>
    <pattern id="rpt">
      ip_name;/dftdsm/reports/cell_name;.dft_stuckat.moresimple.rpt
    </pattern>
    <pattern id="stuck">
      ip_name;/dftdsm/reports/cell_name;.dft_stuckat.stuck_at_coverage.rpt
    </pattern>
    <pattern id="atspeed">
      ip_name;/dftdsm/reports/cell_name;.dft_atspeed.moresimple.rpt
    </pattern>
    <pattern id="atspeed_tran">
      ip_name;/dftdsm/reports/cell_name;.dft_atspeed.transition_coverage.rpt
    </pattern>
    <pattern id="sgdc">
      ip_name;/dftdsm/cell_name;.sgdc
    </pattern>
    <pattern id="swl" minimum="0">
      ip_name;/dftdsm/cell_name;.swl
    </pattern>
    <producer id="ICD-IP"/>
    <consumer id="ICD-IP"/>
  </template>
  <template caseid="208253" id="DV">
    <description>
      Desirn verification. This deliverable contains results from all IP, Subsystem and Chip level verification. DOC: http://rd/ice/product/Nadder/NadderPlanning/Shared%20Documents/Release%20Management/Deliverables/DV_Definition.docx
    </description>
    <pattern id="wkset">
      ip_name;/dv/*.ip_name;.*.workset
    </pattern>
    <pattern id="file" mimetype="text/xml">
      ip_name;/dv/audit/audit.cell_name;.dv.xml
    </pattern>
    <producer id="IP-DV"/>
    <consumer id="ICD-PD"/>
    <consumer id="IPD"/>
    <consumer id="SOFTWARE"/>
  </template>
  <template caseid="209040" id="FCPWRMOD">
    <description>
      Full chip power model. DOC: http://rd/ice/product/Nadder/NadderPlanning/Shared%20Documents/Release%20Management/Deliverables/FCPWRMOD_Definition.docx
    </description>
    <pattern id="file">
      ip_name;/fcpwrmod/...
    </pattern>
    <producer id="ICD-IP"/>
    <producer id="ICD-PD"/>
  </template>
  <template caseid="209041" id="FV">
    <description>
      FV exists to collect the Formal Equivalence report from an industry standard solution like Conformal LEC. There is no database to deliver, simply the result file showing the state of compare or equivalence. Audit files are also delivered in accordance with the Audit checks defined for this deliverable. Specifically this checks the post SYN gate level netlist versus the original RTL. DOC: http://rd/ice/product/Nadder/NadderPlanning/Shared%20Documents/Release%20Management/Deliverables/FV_Definition.docx
    </description>
    <pattern id="lec_log">
      ip_name;/fv/rtl_vs_schematic/cell_name;/cell_name;.log
    </pattern>
    <pattern id="do">
      ip_name;/fv/rtl_vs_schematic/cell_name;/cell_name;.do
    </pattern>
    <pattern id="sum_log">
      ip_name;/fv/rtl_vs_schematic/cell_name;/cell_name;_summary.log
    </pattern>
    <pattern id="reporta">
      ip_name;/fv/rtl_vs_schematic/cell_name;/reports/abort.rpt
    </pattern>
    <pattern id="reportbb">
      ip_name;/fv/rtl_vs_schematic/cell_name;/reports/black_box.rpt
    </pattern>
    <pattern id="reportb">
      ip_name;/fv/rtl_vs_schematic/cell_name;/reports/comp_data.rpt
    </pattern>
    <pattern id="reportc">
      ip_name;/fv/rtl_vs_schematic/cell_name;/reports/design_data.rpt
    </pattern>
    <pattern id="reportd">
      ip_name;/fv/rtl_vs_schematic/cell_name;/reports/gate_sum.rpt
    </pattern>
    <pattern id="reporte">
      ip_name;/fv/rtl_vs_schematic/cell_name;/reports/ignored_inputs.rpt
    </pattern>
    <pattern id="reportf">
      ip_name;/fv/rtl_vs_schematic/cell_name;/reports/ignored_outputs.rpt
    </pattern>
    <pattern id="reportg">
      ip_name;/fv/rtl_vs_schematic/cell_name;/reports/noneq.rpt
    </pattern>
    <pattern id="reporth">
      ip_name;/fv/rtl_vs_schematic/cell_name;/reports/pin_constraints.rpt
    </pattern>
    <pattern id="reporti">
      ip_name;/fv/rtl_vs_schematic/cell_name;/reports/pin_direction.rpt
    </pattern>
    <pattern id="reportj">
      ip_name;/fv/rtl_vs_schematic/cell_name;/reports/remove_instances.rpt
    </pattern>
    <pattern id="reportk">
      ip_name;/fv/rtl_vs_schematic/cell_name;/reports/renaming_rule.rpt
    </pattern>
    <pattern id="reportl">
      ip_name;/fv/rtl_vs_schematic/cell_name;/reports/statistic.rpt
    </pattern>
    <pattern id="reportm">
      ip_name;/fv/rtl_vs_schematic/cell_name;/reports/stuck_at.rpt
    </pattern>
    <pattern id="reportn">
      ip_name;/fv/rtl_vs_schematic/cell_name;/reports/unmap_extra.rpt
    </pattern>
    <pattern id="reporto">
      ip_name;/fv/rtl_vs_schematic/cell_name;/reports/unmap_notmap.rpt
    </pattern>
    <pattern id="reportp">
      ip_name;/fv/rtl_vs_schematic/cell_name;/reports/unmap_unreach.rpt
    </pattern>
    <pattern id="reportq">
      ip_name;/fv/rtl_vs_schematic/cell_name;/reports/user_mapped_point.rpt
    </pattern>
    <producer id="ICD-IP"/>
    <consumer id="ICD-PD"/>
    <consumer id="TE"/>
  </template>
  <template caseid="205265" id="FVPNR">
    <description>
      FVPNR exists to collect the Formal Equivalence report from an industry standard solution like Conformal LEC. There is no database to deliver, simply the result file showing the state of compare or equivalence. Audit files are also delivered in accordance with the Audit checks defined for this deliverable. Specifically this checks the post PNR gate level netlist versus the SYN gate level netlist. DOC: http://rd/ice/product/Nadder/NadderPlanning/Shared%20Documents/Release%20Management/Deliverables/FVPNR_Definition.docx
    </description>
    <pattern id="lec_log">
      ip_name;/fvpnr/results/cell_name;.lec.log
    </pattern>
    <pattern id="abort">
      ip_name;/fvpnr/results/cell_name;.abort.rpt
    </pattern>
    <pattern id="black_box">
      ip_name;/fvpnr/results/cell_name;.black_box.rpt
    </pattern>
    <pattern id="comp_data">
      ip_name;/fvpnr/results/cell_name;.comp_data.rpt
    </pattern>
    <pattern id="design_data">
      ip_name;/fvpnr/results/cell_name;.design_data.rpt
    </pattern>
    <pattern id="gate_sum">
      ip_name;/fvpnr/results/cell_name;.gate_sum.rpt
    </pattern>
    <pattern id="ignored_inputs">
      ip_name;/fvpnr/results/cell_name;.ignored_inputs.rpt
    </pattern>
    <pattern id="ignored_outputs">
      ip_name;/fvpnr/results/cell_name;.ignored_outputs.rpt
    </pattern>
    <pattern id="modeling_msg">
      ip_name;/fvpnr/results/cell_name;.modeling_msg.rpt
    </pattern>
    <pattern id="noneq">
      ip_name;/fvpnr/results/cell_name;.noneq.rpt
    </pattern>
    <pattern id="pin_constraints">
      ip_name;/fvpnr/results/cell_name;.pin_constraints.rpt
    </pattern>
    <pattern id="pin_direction">
      ip_name;/fvpnr/results/cell_name;.pin_direction.rpt
    </pattern>
    <pattern id="renaming_rule">
      ip_name;/fvpnr/results/cell_name;.renaming_rule.rpt
    </pattern>
    <pattern id="statistic">
      ip_name;/fvpnr/results/cell_name;.statistic.rpt
    </pattern>
    <pattern id="stuck_at">
      ip_name;/fvpnr/results/cell_name;.stuck_at.rpt
    </pattern>
    <pattern id="unmap_extra">
      ip_name;/fvpnr/results/cell_name;.unmap_extra.rpt
    </pattern>
    <pattern id="unmap_notmap">
      ip_name;/fvpnr/results/cell_name;.unmap_notmap.rpt
    </pattern>
    <pattern id="unmap_unreach">
      ip_name;/fvpnr/results/cell_name;.unmap_unreach.rpt
    </pattern>
    <pattern id="do" minimum="0">
      ip_name;/fvpnr/run/cell_name;.*.do
    </pattern>
    <pattern id="conformal_tcl">
      ip_name;/fvpnr/run/cell_name;.conformal.tcl
    </pattern>
    <producer id="ICD-IP"/>
    <producer id="SPNR"/>
    <consumer id="ICD-IP"/>
    <consumer id="SPNR"/>
    <consumer id="ICD-PD"/>
  </template>
  <template caseid="205267" id="FVSYN">
    <description>
      FSYN exists to collect the Formal Equivalence report from an industry standard solution like Conformal LEC. There is no database to deliver, simply the result file showing the state of compare or equivalence. Audit files are also delivered in accordance with the Audit checks defined for this deliverable. Specifically this checks the post SYN gate level netlist versus the original RTL. DOC: http://rd/ice/product/Nadder/NadderPlanning/Shared%20Documents/Release%20Management/Deliverables/FVSYN_Definition.docx
    </description>
    <pattern id="lec_log">
      ip_name;/fvsyn/results/cell_name;*.lec.log
    </pattern>
    <pattern id="abort">
      ip_name;/fvsyn/results/cell_name;*.abort.rpt
    </pattern>
    <pattern id="black_box">
      ip_name;/fvsyn/results/cell_name;*.black_box.rpt
    </pattern>
    <pattern id="comp_data">
      ip_name;/fvsyn/results/cell_name;*.comp_data.rpt
    </pattern>
    <pattern id="design_data">
      ip_name;/fvsyn/results/cell_name;*.design_data.rpt
    </pattern>
    <pattern id="gate_sum">
      ip_name;/fvsyn/results/cell_name;*.gate_sum.rpt
    </pattern>
    <pattern id="ignored_inputs">
      ip_name;/fvsyn/results/cell_name;*.ignored_inputs.rpt
    </pattern>
    <pattern id="ignored_outputs">
      ip_name;/fvsyn/results/cell_name;*.ignored_outputs.rpt
    </pattern>
    <pattern id="modeling_msg">
      ip_name;/fvsyn/results/cell_name;*.modeling_msg.rpt
    </pattern>
    <pattern id="noneq">
      ip_name;/fvsyn/results/cell_name;*.noneq.rpt
    </pattern>
    <pattern id="pin_constraints">
      ip_name;/fvsyn/results/cell_name;*.pin_constraints.rpt
    </pattern>
    <pattern id="pin_direction">
      ip_name;/fvsyn/results/cell_name;*.pin_direction.rpt
    </pattern>
    <pattern id="renaming_rule">
      ip_name;/fvsyn/results/cell_name;*.renaming_rule.rpt
    </pattern>
    <pattern id="statistic">
      ip_name;/fvsyn/results/cell_name;*.statistic.rpt
    </pattern>
    <pattern id="stuck_at">
      ip_name;/fvsyn/results/cell_name;*.stuck_at.rpt
    </pattern>
    <pattern id="unmap_extra">
      ip_name;/fvsyn/results/cell_name;*.unmap_extra.rpt
    </pattern>
    <pattern id="unmap_notmap">
      ip_name;/fvsyn/results/cell_name;*.unmap_notmap.rpt
    </pattern>
    <pattern id="unmap_unreach">
      ip_name;/fvsyn/results/cell_name;*.unmap_unreach.rpt
    </pattern>
    <pattern id="do" minimum="0">
      ip_name;/fvsyn/run/cell_name;.*.do
    </pattern>
    <pattern id="conformal_tcl">
      ip_name;/fvsyn/run/cell_name;.conformal.tcl
    </pattern>
    <producer id="ICD-IP"/>
    <consumer id="SPNR"/>
  </template>
  <template caseid="209043" id="GP">
    <description>
      Golden Pattern means DOC: http://rd/ice/product/Nadder/NadderPlanning/Shared%20Documents/Release%20Management/Deliverables/GP_Definition.docx
    </description>
    <pattern id="vpd">
      ip_name;/gp/*.vpd
    </pattern>
    <pattern id="txt">
      ip_name;/gp/*_bcm_inst.txt
    </pattern>
    <pattern id="vfile">
      ip_name;/gp/*.v
    </pattern>
    <producer id="ICD-IP"/>
    <consumer id="TE"/>
  </template>
  <template caseid="205270" id="INTERRBA">
    <description>
      INTERRBA exists to describe the CRAM Definition for routing blocks. The difference between INTERRBA definition compared to a block RDF is that this describes which connections are connected when CRAM setting is ENABLED. Audit files are also delivered in accordance with the Audit checks defined for this deliverable. DOC: http://rd/ice/product/Nadder/NadderPlanning/Shared%20Documents/Release%20Management/Deliverables/INTERRBA_Definition.docx
    </description>
    <pattern id="file">
      ip_name;/interrba/cell_name;.interblock.rba
    </pattern>
    <producer id="ICD-IP"/>
    <consumer id="ICD-PD"/>
    <consumer id="IP-DV"/>
    <consumer id="FCV"/>
    <consumer id="TE"/>
  </template>
  <template caseid="206838" id="INTFC">
    <description>
      The Interface Library (INTFCLIB) deliverable provides specifc information in a compact database form (.dmz) for interfaces used by DMZ components. Interfaces are development in groups independently (and may have different owners). Interface groups have their own directory with the intfc ICM tree. Interface owners may add more group directories as required. Each interface group contains a src subdirectory that additionally contains the DMZ interface Tcl definition file. Multiple interfaces within a group may be supported as a single Tcl file (with multiple interface definitions) or by separate Tcl files. DMZ interface Tcl source files are 'compiled' into a DMZ interface database file through the dmzInterfcBuilder utility. DMZ interface data files are combined by means of the DMZ utility dmzIntfcMgr to produce a single merged DMZ group library containing all the interfaces within the group. This single merged group interface library is submitted to ICM as the deliverable for the group as 'intfc_group_intfcLib.dmz'. A release is made by merging all group interface libraries into one composite library. This DMZ data file is delivered in the intfc directory library. The src directory of the library directory will contain the dmzIntfcMgr control text file of all the group interface libraries to merge. This composite library is the only interface data file consumed by IP and hierarchical assemblies. Added by Henry Jen. As of 2015 ww05, a new directory called widthheight is created: intfclib/intfc/widthheight. This new directory serves to store IP wrapper sizes. See page 4 for details on files stored under widthheight. DOC: http://rd/ice/product/Nadder/NadderPlanning/Shared%20Documents/Release%20Management/Deliverables/INTFC_Definition.docx
    </description>
    <pattern id="intfc_dmz" mimetype="application/octet-stream">
      ip_name;/intfc/library/library_intfcLib.dmz
    </pattern>
    <pattern id="txt">
      ip_name;/intfc/library/src/library.txt
    </pattern>
    <producer id="ICD-IP"/>
    <consumer id="ICD-PD"/>
    <consumer id="IP-DV"/>
    <consumer id="FCV"/>
    <consumer id="NETLIST"/>
    <consumer id="IPD"/>
    <consumer id="TE"/>
  </template>
  <template caseid="205275" id="IPFLOORPLAN">
    <description>
      The IPFLOORPLAN deliverable exists to define data needed to define the bounding box of a design that is intended. Essentially a place to store the floorplan.def of an IP typically generated by layout. This should include def sections for design, diearea, pins, macro components and blockages. Additionally, IPFLOORPLAN will contain lef for the IP. All custom blocks, embedded in PnR especially, must submit lef abstracts for IP. These will in turn be converted in the PnR flow to FRAM views in MW and used in the PnR flow. IPFLOORPLAN deliverable files should contain: amp;ip_name;/ipfloorplan/lt;amp;cell_namegt;;.floorplan.def Logical Name: def amp;ip_name;/ipfloorplan/lt;amp;cell_namegt;;.floorplan.lef Logical Name: lef amp;ip_name;/ipfloorplan/audit/audit.lt;amp;cell_namegt;.ipfloorplan_lefout.xml amp;ip_name;/ipfloorplan/audit/audit.lt;amp;cell_namegt;.ipfloorplan_defout.xml amp;ip_name;/ipfloorplan/lef/lt;amp;cell_namegt;_lefout.txt amp;ip_name;/ipfloorplan/lef/lt;amp;cell_namegt;_lefout.errlog amp;ip_name;/ipfloorplan/def/lt;amp;cell_namegt;_defout.txt amp;ip_name;/ipfloorplan/def/lt;amp;cell_namegt;_defout.errlog (DMZ do not have def compare) amp;ip_name;/ipfloorplan/APCC/lt;amp;cell_namegt;.apccwaiver (optional) DOC: http://rd/ice/product/Nadder/NadderPlanning/Shared%20Documents/Release%20Management/Deliverables/IPFLOORPLAN_Definition.docx
    </description>
    <pattern id="def" minimum="0">
      ip_name;/ipfloorplan/cell_name;.floorplan.def
    </pattern>
    <pattern id="lef">
      ip_name;/ipfloorplan/cell_name;.floorplan.lef
    </pattern>
    <pattern id="leftxt">
      ip_name;/ipfloorplan/lef/cell_name;_lefout.txt
    </pattern>
    <pattern id="leflog">
      ip_name;/ipfloorplan/lef/cell_name;_lefout.errlog
    </pattern>
    <pattern id="deftxt" minimum="0">
      ip_name;/ipfloorplan/def/cell_name;_defout.txt
    </pattern>
    <pattern id="deflog" minimum="0">
      ip_name;/ipfloorplan/def/cell_name;_defout.errlog
    </pattern>
    <pattern id="apcc" minimum="0">
      ip_name;/ipfloorplan/APCC/cell_name;.apccwaiver
    </pattern>
    <producer id="ICD-IP"/>
    <consumer id="ICD-PD"/>
    <consumer id="IPD"/>
    <consumer id="SPNR"/>
    <consumer id="FCI"/>
  </template>
  <template caseid="209039" id="IPPWRMOD">
    <description>
      The IPPWRMOD deliverables exist to capture the power collateral (power consumption for different modes) needed for Quartus Early-Power-Estimator (EPE) / Power-Play-Power-Analyzer (PPPA) and IP/Fullchip Power goal/budget closure. The deliverable is also named IPPWRMOD in the 20nm projects. For 14nm projects, only the ICM IP variants identified as power modeling hierarchy will need to deliver this IPPWRMOD deliverables. For IP variants that is identified not to delivery, IP owners will have to update the 'unneeded deliverables' accordingly as per describe in IPSPEC spec. The deliverables contains the following files 1. Filelist - lt;*gt;.ippwrmod.filelist This file will list down the complete files (Ex. power model, or optional netlist) that is provided for the power model delivery Due to the DMZ Wrapper/Base Function and Power Molecule methodology, the lt;*gt; name may not always be the top-cell names in IPSPEC/cell_names.txt. Thus, it lt;*gt; can be any arbitrary cell names. 2. Power Model (Optional) There will be 2 separate file delivery for Dynamic Power (lt;*gt;.dynamic_power.xlsx) and Static Power (lt;*gt;.static_power.xlsx) The exact format/content for the Dynamic/Static power file is still work-in-progress amp; TBD. 3. Netlists (Optional) The Verilog (*.v) and SPF (*.spf) netlist is optional and limited to the few IP variants (Ex. LAB/MLAB/IOB) cases that the SW Power Model is generating lower-level power numbers for Quartus internal PPPA or AIOT model. DOC: http://rd/ice/product/Nadder/NadderPlanning/Shared%20Documents/Release%20Management/Deliverables/IPPWRMOD_Definition.docx
    </description>
    <filelist id="filelist">
      ip_name;/ippwrmod/*.ippwrmod.filelist
    </filelist>
    <pattern id="dynamic" mimetype="application/vnd.ms-excel" minimum="0">
      ip_name;/ippwrmod/xls/*.dynamic_power.xls
    </pattern>
    <pattern id="static" mimetype="application/vnd.ms-excel" minimum="0">
      ip_name;/ippwrmod/xls/*.static_power.xls
    </pattern>
    <pattern id="spf" minimum="0">
      ip_name;/ippwrmod/netlist/spf/*.spf.gz
    </pattern>
    <pattern id="verilog" minimum="0">
      ip_name;/ippwrmod/netlist/verilog/*.v
    </pattern>
    <producer id="ICD-IP"/>
    <consumer id="ICD-PD"/>
    <consumer id="IPD"/>
    <consumer id="SOFTWARE"/>
  </template>
  <template caseid="205286" id="IPSPEC">
    <description>
      The IPSPEC deliverable exists to provide information about the content of a variant. For 14nm projects all variants in IC Manage need to deliver an IPSPEC deliverable. The IPSPEC deliverable is a crucial component to many test systems that run tests against collateral delivered by our engineering teams and must exist from the time a variant is created. Failing to deliver an IPSPEC deliverable will result in a non-waivable error in the gated release system. Users should ensure that the list text files are saved with UNIX-style line endings and not Windows-style line endings. Most modern text editors can translate the format for you. This deliverable contains the following files: The cell_names.txt file This file defines the names of cells within the variant that can be instantiated by other variants. The cell names appear one per line. Blank lines are ok, and lines beginning with a hash character (#) will be ignored (use for comments). The file is required to exist. The IPSPEC cell_names.txt file is the vehicle for an IP owner to communicate to the downstream user what is being delivered and can be instantiated in the parent. Therefore IP blocks which have base functions and wrappers around those base functions need to list the wrappers in the cell_names.txt file since only the wrappers are exported and can be instantiated but not the base functions. Further details on this file can be found in the Multiple Cells per IP section of the VP documentation. lt;cellnamegt;.unneeded_deliverables.txt files This file, if it exists, informs the gated release system (and quick check utility) that the deliverables listed in the file (one per line) do not need to be provided (or tested) by the system for the given cellname. Each entry must be a valid ICManage libtype for the variant and must be all lower case following the format of the libtype. The file is optional. The IPSPEC deliverable may not be listed an unneeded. lt;cellnamegt;.molecules.txt files Each cell can optionally have a cellName.molecules.txt file that lists the timing molecules within the cell. Timing molecules are those Verilog modules for which there are Liberty models. A cell that has a corresponding cellName.molecules.txt and an entry in the cell name list in cell_names.txt is a 'top-cell'. However a cell can have a cellName.molecules.txt file without an entry in cell_names.txt. The format is a list of cell names, one per line. The file should exist whenever timing collateral is being generated. This would mean at any stage that TIMEMOD is to be delivered. Note that we are going to be delivering TIMEMOD much earlier in ND than in NF. The IP owners are responsible for creating the molecules.txt file. By the time the 'placeholder' timing collateral is delivered, these files must have been delivered. If the molecules.txt for a cell is missing, it is the same as an empty molecules.txt file. It simply means that there are no timing molecules for that cell. Instances of timing molecules are: . The leaf elements of any Verilog netlist used for timing closure for SSD or SW are called Timing Molecules. . A Timing Molecule may have had its Liberty model generated from a collection of Timing Elements at a lower level of hierarchy. . A Timing Molecule may also just be a simple gate (e.g. inverter) with a Liberty model if it is seen by SSD or SW. . A Timing Element is a unit of design represented by a Liberty model which does not need to be seen by SSD or SW, e.g. is needed by CIP only. . Example: An ASIC block that needs to have a Liberty model because of Quartus is a Timing Molecule. The Liberty model is generated by running PrimeTime on a netlist composed of Timing Elements. . Examples of Timing Elements include ICF standard cells and possibly analog blocks embedded below a Timing Molecule. Multiple timing tools are expected to use this file. For example, the plan for Virtuoso is to have the Verilog netlister automatically read this file to identify the stop cells. Similarly, the flow that runs extraction can use this file to identify the SKIP_CELL list. Finally, Software is tentatively considering using this list to identify the molecules that they actually care about. In NightFury, timing molecules were called 'atoms', but that name is already in use elsewhere. To avoid confusion, in Nadder we have changed the name to 'molecules'. lt;cellnamegt;.elements.txt files Existence: A cell that has a molecules.txt file which contains its own name (i.e. it is seen by Quartus) may have a $topcell.elements.txt file Contents: The $topcell.elements.txt file contains all leaf cells that are needed by RC-LVS for running for extraction purposes. Each leaf cell listed in the *.elements.txt file is expected to have a Liberty file somewhere in the design workspace. Format: The format of the $topcell.elements.txt file is one leaf cell per line, where the leaf cell's library name is separated from the leaf cell name by a ' ': oa_library1 leaf_cell1 oa_library1 leaf_cell2 The library name may be optional if the leaf cell listed in the $topcell.elements.txt file is actually in the library itself, the library name may be omitted. allmolecules.txt files Existence: This is an optional file at the variant level. Contents: This file contains all the molecules that would be needed by any of the topcells in the variant. Each leaf cell listed in the allmolecules.txt file is expected to have a Liberty file somewhere in the design workspace. Format: The format of the allmolecules file is one leaf cell per line, where the leaf cell's library name is separated from the leaf cell name by a ' ': oa_library1 leaf_cell1 oa_library1 leaf_cell2 The library name may be optional if the leaf cell listed in the allmolecules.txt file is actually in the library itself, the library name may be omitted. allelements.txt files Existence: This is an optional file at the variant level. However, if this file exists, allmolecules.txt should also exist. Contents: This file contains all the elements that would be needed by any of the topcells in the variant. Each leaf cell listed in the allelements.txt file is expected to have a Liberty file somewhere in the design workspace. Format: The format of the allelements file is one leaf cell per line, where the leaf cell's library name is separated from the leaf cell name by ' ': oa_library1 leaf_cell1 oa_library1 leaf_cell2 The library name may be optional if the leaf cell listed in the allmolecules.txt file is actually in the library itself, the library name may be omitted. Notes: $topcell.molecules.txt and $topcell.elements.txt and allmolecules.txt and allelements.txt do not need to include names of standard or structured design cells. Such cells will be automatically assumed to be leaf cells for the design by the flows using these files. The $topcell.elements.txt file is needed for blocks that are molecules but are also composed of leaf cells RC-LVS needs to know the list of leaf cells DOC: http://rd/ice/product/Nadder/NadderPlanning/Shared%20Documents/Release%20Management/Deliverables/IPSPEC_Definition.docx
    </description>
    <pattern id="cell_names">
      ip_name;/ipspec/cell_names.txt
    </pattern>
    <pattern id="elements" minimum="0">
      ip_name;/ipspec/cell_name;.elements.txt
    </pattern>
    <pattern id="molecules" minimum="0">
      ip_name;/ipspec/cell_name;.molecules.txt
    </pattern>
    <pattern id="unneeded_deliverables" minimum="0">
      ip_name;/ipspec/cell_name;.unneeded_deliverables.txt
    </pattern>
    <pattern id="allmolecules" minimum="0">
      ip_name;/ipspec/allmolecules.txt
    </pattern>
    <pattern id="allelements" minimum="0">
      ip_name;/ipspec/allelements.txt
    </pattern>
    <producer id="ICD-IP"/>
    <consumer id="ICD-IP"/>
    <consumer id="IPD"/>
    <consumer id="SOFTWARE"/>
    <consumer id="TE"/>
  </template>
  <template caseid="209045" id="IPXACT">
    <description>
      IPXACT is an XML standard (IEEE 1685-2009) for SOC construction. The SOC team uses it for Register Description as well as SOC level stitching and integration. IPXACT XMLs are produced by individual RTL/block owners. Port descriptions are mandatory in the XML while register descriptions are required only when registers are present in a block. XMLs are delivered by IP vendors (e.g Synopsys, ARM) as well as created by Altera engineers. All XMLs are managed and verified by the Magillem tool. DOC: http://rd/ice/product/Nadder/NadderPlanning/Shared%20Documents/Release%20Management/Deliverables/IPXACT_Definition.docx
    </description>
    <pattern id="file" mimetype="text/xml">
      ip_name;/ipxact/cell_name;.xml
    </pattern>
    <producer id="ICD-IP"/>
    <consumer id="IPD"/>
    <consumer id="SOFTWARE"/>
    <consumer id="ICD-IP"/>
  </template>
  <template caseid="205448" id="LAYMISC">
    <description>
      The LAYMISC deliverable exists to store: amp;ip_name.signoff.html -- tapeout signoff violations audit.amp;cell_name.laymisc_signoff.xml file Notes: Layout Errors file for runsets that allowed waiver from the same variant will be used to extract to generate the signoff.html. The signoff comment for individual waived errors will be extracted from CPYDB from all variants of the same workspace. audit.laymisc.laymisc_signoff.xml file generated based on the extraction run and only 1 xml per variant. DOC: http://rd/ice/product/Nadder/NadderPlanning/Shared%20Documents/Release%20Management/Deliverables/LAYMISC_Definition.docx
    </description>
    <pattern id="html">
      ip_name;/laymisc/ip_name;.signoff.html
    </pattern>
    <producer id="LAY-IP"/>
    <producer id="FCI"/>
    <consumer id="LAY-IP"/>
    <consumer id="FCI"/>
    <consumer id="ICD-IP"/>
  </template>
  <template caseid="205449" id="LINT">
    <description>
      Lint is needed to check for HDL syntax, structural, coding and consistency problems in RTL descriptions which might be potential functional issues. It is required to ensure RTL design quality. The SpyGlass tool is used to lint on the RTL in all ASIC and Custom IPs. Deliverables are filelist, report file, log file and waiver. They are not directly consumed by other deliverables. It enables early detection of potential design issues which can be addressed at the earlier stages of the design development. DOC: http://rd/ice/product/Nadder/NadderPlanning/Shared%20Documents/Release%20Management/Deliverables/LINT_Definition.docx
    </description>
    <pattern id="custom_filelist" minimum="0">
      ip_name;/lint/filelist/cell_name;.custom.lint.f
    </pattern>
    <pattern id="lint_filelist">
      ip_name;/lint/filelist/cell_name;.lint.f
    </pattern>
    <pattern id="mustfix_log">
      ip_name;/lint/cell_name;.mustfix_results/console.log
    </pattern>
    <pattern id="mustfix_rpt">
      ip_name;/lint/cell_name;.mustfix_results/moresimple.rpt
    </pattern>
    <pattern id="review_log">
      ip_name;/lint/cell_name;.review_results/console.log
    </pattern>
    <pattern id="review_rpt">
      ip_name;/lint/cell_name;.review_results/moresimple.rpt
    </pattern>
    <pattern id="swl" minimum="0">
      ip_name;/lint/cell_name;.swl
    </pattern>
    <producer id="ICD-IP"/>
    <consumer id="ICD-PD"/>
    <consumer id="IPD"/>
  </template>
  <template caseid="210067" id="MW">
    <description>
      Physical database for sub-systems, CR_*, sector_sa, sector, and full chip. This is the Milkyway representation of these blocks. The blocks are constructed and assembled until we get to the full chip. DOC: http://rd/ice/product/Nadder/NadderPlanning/Shared%20Documents/Release%20Management/Deliverables/MW_Definition.docx
    </description>
    <milkyway id="mwLib" mimetype="application/octet-stream">
      <libpath>
        ip_name;/mw/ip_name;
      </libpath>
      <lib>
        ip_name;
      </lib>
    </milkyway>
    <producer id="FCI"/>
    <consumer id="LAY-IP"/>
    <consumer id="ICD-IP"/>
    <consumer id="FCI"/>
  </template>
  <template caseid="206839" id="NETLIST">
    <description>
      The netlist (NETLIST) deliverable provides a gate-level Verilog netlist of the specific IP block. This deliverable is part of hierarchical IP blocks. The netlist is a single-level of hierarchy and does not contain the netlist(s) of lower-level instances. The netlist is typically created from the DMZ utility dmzNetlister which requires the collateral from associated COMPLIB deliverable. This deliverable considers that the Verilog netlist may be created outside of the DMZ flow, however, details for such a flow have not been discussed at this time. The recommendation is to use the DMZ netlister. A release is made by running the dmzNetlister utility via the control script in the src directory. An audit trace file will be created along with the netlist deliverable. DOC: http://rd/ice/product/Nadder/NadderPlanning/Shared%20Documents/Release%20Management/Deliverables/NETLIST_Definition.docx
    </description>
    <filelist id="cell_filelist">
      ip_name;/netlist/filelists/dv/cell_name;.f
    </filelist>
    <filelist id="cell_filelist_syn" minimum="0">
      ip_name;/netlist/filelists/syn/cell_name;.f
    </filelist>
    <pattern id="file">
      ip_name;/netlist/cell_name;.v
    </pattern>
    <producer id="ICD-IP"/>
    <consumer id="ICD-PD"/>
    <consumer id="FCV"/>
    <consumer id="FCI"/>
    <consumer id="IPD"/>
    <consumer id="NETLIST"/>
    <consumer id="SOFTWARE"/>
    <consumer id="TE"/>
  </template>
  <template caseid="209768" id="OA">
    <description>
      This deliverable is used to store the physical IC design data, schematic and layout, in the OpenAccess format. This OA deliverable needs special support for the setup the virtuoso cds.lib. Need to include the OA library definition in the cds.libicm as: DEFINE amp;ip_name; lt;workspace_rootgt;/amp;ip_name;/oa/amp;ip_name; DOC: http://rd/ice/product/Nadder/NadderPlanning/Shared%20Documents/Release%20Management/Deliverables/OA_Definition.docx
    </description>
    <pattern id="file">
      ip_name;/oa/...
    </pattern>
    <producer id="ICD-IP"/>
    <producer id="LAY-IP"/>
    <producer id="FCI"/>
    <consumer id="ICD-IP"/>
    <consumer id="LAY-IP"/>
    <consumer id="FCI"/>
    <consumer id="SOFTWARE"/>
  </template>
  <template caseid="205450" id="OASIS">
    <description>
      The OASIS deliverable exists to store: 1. Stream File a. Based on /ipspec/cell_names.txt b. Bump stream files for full-chip bump integration -- apply to Core Sector, IO SS, HSSI SS, Clarke and FC only. 2. audit.lt;amp;cell_namegt;.oasis.f 3. audit.lt;amp;cell_namegt;.oasis.OA.xml (OA) or audit.lt;amp;cell_namegt;.oasis.premerge.xml (MW) 4. audit.lt;amp;cell_namegt;.oasis.merge.xml 5. lt;amp;cell_namegt;.oas.log DOC: http://rd/ice/product/Nadder/NadderPlanning/Shared%20Documents/Release%20Management/Deliverables/OASIS_Definition.docx
    </description>
    <pattern id="file" mimetype="application/octet-stream">
      ip_name;/oasis/cell_name;.oas
    </pattern>
    <producer id="LAY-IP"/>
    <producer id="SPNR"/>
    <producer id="FCI"/>
    <consumer id="ICD-IP"/>
    <consumer id="LAY-IP"/>
    <consumer id="SPNR"/>
    <consumer id="FCI"/>
    <consumer id="IPD"/>
  </template>
  <template caseid="82023" id="OA_SIM">
    <description>
      This deliverable is used to store the simulation schematic/testbench in OpenAccess format. This OA deliverable needs special support for the setup the virtuoso cds.lib. Need to include the OA library definition in the cds.libicm as: DEFINE amp;ip_name;_sim lt;workspace_rootgt;/amp;ip_name;/oa_sim/amp;ip_name;_sim Note that the filelist is an output. That is why it uses `amp;cell_name;`. DOC: http://rd/ice/product/Nadder/NadderPlanning/Shared%20Documents/Release%20Management/Deliverables/OA_SIM_Definition.docx
    </description>
    <pattern id="file">
      ip_name;/oa_sim/...
    </pattern>
    <producer id="ICD-IP"/>
    <consumer id="ICD-IP"/>
  </template>
  <template caseid="205451" id="PERIODICTST">
    <description>
      Each file in this deliverable contains a shell script that executes a test of the type suggested by the file name. The script will be run with the top of the workspace as the current working directory. Before the script is run, a review synced IC Manage workspace will exist. That is, the workspace will contain directories only. Thus the script must begin with ``icmp4 sync`` on the files needed to run the test. If the script wants a different working directory, the script must cd to that directory. DOC: http://rd/ice/product/Nadder/NadderPlanning/Shared%20Documents/Release%20Management/Deliverables/PERIODICTST_Definition.docx
    </description>
    <pattern id="cdc" mimetype="application/x-sh" minimum="0">
      ip_name;/periodictst/cdc.sh
    </pattern>
    <pattern id="design_intent" mimetype="application/x-sh" minimum="0">
      ip_name;/periodictst/design_intent.sh
    </pattern>
    <pattern id="drc" mimetype="application/x-sh" minimum="0">
      ip_name;/periodictst/drc.sh
    </pattern>
    <pattern id="lint" mimetype="application/x-sh" minimum="0">
      ip_name;/periodictst/lint.sh
    </pattern>
    <pattern id="lvs" mimetype="application/x-sh" minimum="0">
      ip_name;/periodictst/lvs.sh
    </pattern>
    <pattern id="simulation" mimetype="application/x-sh" minimum="0">
      ip_name;/periodictst/simulation.sh
    </pattern>
    <pattern id="sta" mimetype="application/x-sh" minimum="0">
      ip_name;/periodictst/sta.sh
    </pattern>
    <pattern id="vp" mimetype="application/x-sh" minimum="0">
      ip_name;/periodictst/vp.sh
    </pattern>
  </template>
  <template caseid="28340" id="PINTABLE">
    <description>
      Pintables are spreadsheets created by IC Design that describe each IO and power pad on a device, its characteristics (e.g. die location, IO bank, programming/test functions, vertical migration constraints), and the corresponding pin it connects to for each supported package. DOC: http://rd/ice/product/Nadder/NadderPlanning/Shared%20Documents/Release%20Management/Deliverables/PINTABLE_Definition.docx
    </description>
    <pattern id="releasenotes" mimetype="application/vnd.openxmlformats-officedocument.wordprocessingml.document">
      ip_name;/pintable/releasenotes.docx
    </pattern>
    <pattern id="file" mimetype="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet">
      ip_name;/pintable/ip_name;.pintable.xlsx
    </pattern>
    <producer id="ICD-PD"/>
    <consumer id="ICD-IP"/>
    <consumer id="LAY-IP"/>
    <consumer id="PACKAGING"/>
    <consumer id="ICD-PD"/>
    <consumer id="IPD"/>
    <consumer id="SOFTWARE"/>
    <consumer id="FCI"/>
    <consumer id="FCV"/>
    <consumer id="NETLIST"/>
    <consumer id="TE"/>
  </template>
  <template caseid="324460" id="PKGDE">
    <description>
      Complete package physical layout database created by Packaging at various design stages including final package tape-out that has all bump to ball connection and power delivery network. DOC: http://rd/ice/product/Nadder/NadderPlanning/Shared Documents/Release Management/Deliverables/PKGDE_Definition.docx
    </description>
    <pattern id="mcm" mimetype="application/octet-stream">
      ip_name;/pkgde/*.mcm
    </pattern>
    <pattern id="zip">
      ip_name;/pkgde/*.zip
    </pattern>
    <producer id="PACKAGING"/>
    <consumer id="PACKAGING"/>
    <consumer id="ICD-PD"/>
  </template>
  <template caseid="324461" id="PKGEE">
    <description>
      Complete package IO and PDN models that extracted from package physical layout database for Quartus IBIS model and ICD/PE system level simulation DOC: http://rd/ice/product/Nadder/NadderPlanning/Shared Documents/Release Management/Deliverables/PKGEE_Definition.docx
    </description>
    <pattern id="zip">
      ip_name;/pkgee/*.zip
    </pattern>
    <producer id="PACKAGING"/>
    <consumer id="PACKAGING"/>
    <consumer id="ICD-PD"/>
  </template>
  <template caseid="205451" id="PNR">
    <description>
      This deliverable captures all the output collateral from the PnR flow. Currently Nadder uses R2G2 as the POR tool/flow in this space and that flow is setup to populate data in these ICM deliverable directories. CVIMPL is an optional deliverable and meant to be the mechanism whereby debug with front end design/exchange is facilitated. It si NOT required. But IF it exists it should be used for ICC. Designers need to be aware of this and copy constraints to the correct location in the R2G2 flow. COPMLIBPHYS is required for floorplan def of core elements floorplanned by DMZ. PLOC file is used to distinguish shield net shapes from power net shapes. A utility added in the R2G2 flow for ICC generates these attributes and stores in the .ploc file. (Lai Chuang Teo -- developed this flow. Cheen Kok Lee added to R2G2) See FB 250849 DOC: http://rd/ice/product/Nadder/NadderPlanning/Shared%20Documents/Release%20Management/Deliverables/PNR_Definition.docx
    </description>
    <pattern id="def">
      ip_name;/pnr/results/cell_name;.pnr.def.gz
    </pattern>
    <pattern id="lvs_v">
      ip_name;/pnr/results/cell_name;.pnr.lvs.v
    </pattern>
    <pattern id="pt_v">
      ip_name;/pnr/results/cell_name;.pnr.pt.v
    </pattern>
    <pattern id="lef">
      ip_name;/pnr/results/cell_name;.pnr.lef
    </pattern>
    <pattern id="ploc">
      ip_name;/pnr/results/cell_name;.ploc
    </pattern>
    <milkyway id="mwLib" mimetype="application/octet-stream">
      <libpath>
        ip_name;/pnr/cell_name;
      </libpath>
      <lib>
        cell_name;
      </lib>
    </milkyway>
    <producer id="SPNR"/>
    <consumer id="ICD-IP"/>
    <consumer id="ICD-PD"/>
    <consumer id="FCI"/>
    <consumer id="TE"/>
  </template>
  <template caseid="205453" id="PORTLIST">
    <description>
      PORTLIST exists to describe interface names and constraint rules for ports under different modes or attributes developed by the designer during their design. Two types of files are stored in this folder: 1) The Interface definition. Interface definition will comply with the Verilog format and will be verified by Fishtail. 2) Port rules will be in TCL format and will DMZ Tool. Audit files are also delivered in accordance with the Audit checks defined for this deliverable. DOC: http://rd/ice/product/Nadder/NadderPlanning/Shared%20Documents/Release%20Management/Deliverables/PORTLIST_Definition.docx
    </description>
    <pattern id="intfc">
      ip_name;/portlist/ip_name;.intfc.v
    </pattern>
    <pattern id="bind">
      ip_name;/portlist/ip_name;.bind.tcl
    </pattern>
    <consumer id="IPD"/>
    <consumer id="SOFTWARE"/>
  </template>
  <template caseid="209046" id="PV">
    <description>
      The PV deliverable exists to store: 1. *.LAYOUT_ERRORS 2. *.RESULTS 3. *.LVS_ERRORS 4. audit.lt;amp;cellnamegt;.pv.lt;IDgt;.xml files 5. audit.lt;amp;cellnamegt;.pv.f a. Based on /ipspec/cell_names.txt DOC: http://rd/ice/product/Nadder/NadderPlanning/Shared%20Documents/Release%20Management/Deliverables/PV_Definition.docx
    </description>
    <filelist id="audit_filelist">
      ip_name;/pv/audit/audit.cell_name;.pv.f
    </filelist>
    <producer id="LAY-IP"/>
    <producer id="FCI"/>
    <consumer id="IPD"/>
    <consumer id="SOFTWARE"/>
    <consumer id="FCV"/>
    <consumer id="TE"/>
  </template>
  <template caseid="171832" id="R2G2">
    <description>
      R2G2 is to store user input settings and scripts used by the R2G2 flow. It is provided as a convenience and is not an official deliverable with any checks. DOC: http://rd/ice/product/Nadder/NadderPlanning/Shared%20Documents/Release%20Management/Deliverables/R2G2_Definition.docx
    </description>
    <pattern id="file">
      ip_name;/r2g2/...
    </pattern>
    <producer id="SPNR"/>
    <consumer id="SPNR"/>
  </template>
  <template caseid="209048" id="RCXT">
    <description>
      The RCXT deliverable exists to store: RC netlist for post-layout simulation, and Static Timing Analysis. Extraction output files are based on a control file list. Custom Extraction GDS|OASIS|PIPO audit.log file amp;ip_name;/gds|oasis|oa/audit CDL audit.log file amp;ip_name;/cdl/audit Equiv audit.log file amp;ip_name;/pv/audit User's skip-cells audit.log file amp;ip_name;/ipspec/audit Asic Extraction Milkyway audit.log file amp;ip_name;/mw/audit User's skip-cells audit.log file amp;ip_name;/ipspec/audit DOC: http://rd/ice/product/Nadder/NadderPlanning/Shared%20Documents/Release%20Management/Deliverables/RCXT_Definition.docx
    </description>
    <pattern id="spf" minimum="0">
      ip_name;/rcxt/lion2_run/cell_name;/STAR/cell_name;.*.SPF
    </pattern>
    <pattern id="spef" minimum="0">
      ip_name;/rcxt/lion2_run/cell_name;/STAR/cell_name;.*.SPEF.gz
    </pattern>
    <producer id="ICD-IP"/>
    <consumer id="ICD-PD"/>
  </template>
  <template caseid="205454" id="RDF">
    <description>
      RDF exists to describe Register or CRAM Definition developed by the designer during their design. The RDF will comply with the IP-XACT XML format and will be verified by Magillem tool. Audit files are also delivered in accordance with the Audit checks defined for this deliverable. Requirement of an audit check for this deliverable is still under evaluation. DOC: http://rd/ice/product/Nadder/NadderPlanning/Shared%20Documents/Release%20Management/Deliverables/RDF_Definition.docx
    </description>
    <pattern id="rdf" mimetype="text/xml" minimum="0">
      ip_name;/rdf/cell_name;.rdf.xml
    </pattern>
    <pattern id="flist" minimum="0">
      ip_name;/rdf/cell_name;.rdf.filelist
    </pattern>
    <producer id="ICD-IP"/>
    <consumer id="IPD"/>
    <consumer id="SOFTWARE"/>
    <consumer id="IP-DV"/>
    <consumer id="FCV"/>
    <consumer id="TE"/>
  </template>
  <template caseid="241400" id="RELDOC">
    <description>
      The documentation related to the released configuration is hosted within this deliverable. Primarily intended to host the release notes, it is also used for Tapeout documentation, sign-off and any document related to a given configuration. DOC: http://rd/ice/product/Nadder/NadderPlanning/Shared%20Documents/Release%20Management/Deliverables/RELDOC_Definition.docx
    </description>
    <pattern id="doc" mimetype="application/vnd.openxmlformats-officedocument.wordprocessingml.document" minimum="0">
      ip_name;/reldoc/releasenotes.docx
    </pattern>
    <pattern id="txt" minimum="0">
      ip_name;/reldoc/releasenotes.txt
    </pattern>
    <pattern id="csv" mimetype="text/csv" minimum="0">
      ip_name;/reldoc/tnrwaivers.csv
    </pattern>
    <producer id="ICD-IP"/>
    <producer id="ICD-PD"/>
    <consumer id="IPD"/>
    <consumer id="SOFTWARE"/>
    <consumer id="IP-DV"/>
    <consumer id="FCV"/>
    <consumer id="TE"/>
  </template>
  <template caseid="205507" id="RTL">
    <description>
      This deliverable contains the Verilog source files and filelists for IP blocks Filelist are sorted into usages for design verification (dv), synthesis (syn), gate-level verification (gv), and memory built-in self-test (mbist). These separated lists are used by flows that do not always want the full set of Verilog functional files. Additionally, it contains gate level source substitution list for pre-compiled or manually compiled IP modules that are meant to be replaced in the implementation flow. The 'fe_gln' list is expected to point to IP in the configuration of the parent. Two modes of replacement are allowed, local to the IP and a global/project level. This document will focus on 'loacal' only. Use DMZFlistMgr to expand the fe_gln filelist. DOC: http://rd/ice/product/Nadder/NadderPlanning/Shared%20Documents/Release%20Management/Deliverables/RTL_Definition.docx
    </description>
    <filelist id="cell_filelist_dv">
      ip_name;/rtl/filelists/dv/cell_name;.f
    </filelist>
    <filelist id="cell_filelist_syn" minimum="0">
      ip_name;/rtl/filelists/syn/cell_name;.f
    </filelist>
    <filelist id="cell_filelist_gv" minimum="0">
      ip_name;/rtl/filelists/gv/cell_name;.f
    </filelist>
    <filelist id="cell_filelist_mbist" minimum="0">
      ip_name;/rtl/filelists/mbist/cell_name;.f
    </filelist>
    <filelist id="fe_gln" minimum="0">
      ip_name;/rtl/filelists/fe_gln/cell_name;.f
    </filelist>
    <pattern id="file" minimum="0">
      ip_name;/rtl/....v
    </pattern>
    <producer id="ICD-IP"/>
    <consumer id="ICD-PD"/>
    <consumer id="NETLIST"/>
    <consumer id="IPD"/>
    <consumer id="SOFTWARE"/>
    <consumer id="IP-DV"/>
    <consumer id="FCV"/>
    <consumer id="TE"/>
  </template>
  <template caseid="205455" id="RTLCOMPCHK">
    <description>
      RTLCOMPCHK (RTL compile check) is needed to ensure that the RTL design is compilable across three simulators that used in ICE and IPD. The three simulators are VCS, NCSim and Modelsim. All ASIC RTL and custom behavioral models are required to pass RTLCOMPCHK. Deliverables are filelist, compile command file and log files. They are not directly consumed by other deliverables. It is required to be compilation error free to enable design work by Altera and Altera's customer. DOC: http://rd/ice/product/Nadder/NadderPlanning/Shared%20Documents/Release%20Management/Deliverables/RTLCOMPCHK_Definition.docx
    </description>
    <pattern id="cell_filelist">
      ip_name;/rtlcompchk/filelist/cell_name;.f
    </pattern>
    <pattern id="vcs_cmd">
      ip_name;/rtlcompchk/vcs/cell_name;.vcs.compile.cmd
    </pattern>
    <pattern id="vcs_log">
      ip_name;/rtlcompchk/vcs/cell_name;.vcs.log
    </pattern>
    <pattern id="ncsim_cmd">
      ip_name;/rtlcompchk/ncsim/cell_name;.ncsim.compile.cmd
    </pattern>
    <pattern id="ncsim_log">
      ip_name;/rtlcompchk/ncsim/cell_name;.ncsim.log
    </pattern>
    <pattern id="modelsim_cmd">
      ip_name;/rtlcompchk/modelsim/cell_name;.modelsim.compile.cmd
    </pattern>
    <pattern id="modelsim_log">
      ip_name;/rtlcompchk/modelsim/cell_name;.modelsim.log
    </pattern>
    <producer id="ICD-IP"/>
    <consumer id="IPD"/>
    <consumer id="IP-DV"/>
    <consumer id="FCV"/>
    <consumer id="TE"/>
  </template>
  <template caseid="209049" id="RV">
    <description>
      This deliverable contains the ASIC and Custom IR/EM related roll up models and output files DOC: http://rd/ice/product/Nadder/NadderPlanning/Shared%20Documents/Release%20Management/Deliverables/RV_Definition.docx
    </description>
    <pattern id="rapidesd_rpt">
      ip_name;/rv/rapidESD/esd/*.rapidesd_rpt
    </pattern>
    <pattern id="rapidesd_log">
      ip_name;/rv/rapidESD/esd/*.totem_log
    </pattern>
    <pattern id="rapidesd_sum">
      ip_name;/rv/rapidESD/esd/*.rapidesd_sum
    </pattern>
    <pattern id="rapidesd_audit">
      ip_name;/rv/rapidESD/esd/*.audit_rpt
    </pattern>
    <pattern id="rapidlup_rpt">
      ip_name;/rv/rapidESD/latchup/*.rapidesd_rpt
    </pattern>
    <pattern id="rapidlup_log">
      ip_name;/rv/rapidESD/latchup/*.totem_log
    </pattern>
    <pattern id="rapidlup_sum">
      ip_name;/rv/rapidESD/latchup/*.rapidesd_sum
    </pattern>
    <producer id="ICD-IP"/>
    <consumer id="ICD-PD"/>
    <consumer id="SOFTWARE"/>
  </template>
  <template caseid="209769" id="SCHMISC">
    <description>
      The SCHMISC deliverable is required to run following tools/methodology/flows: 1. PERC schmisc/perc/amp;cell_name;.waiver (optional) schmisc/perc/amp;cell_name;.perc_glitch_checker.csv (optional files, no check and checksum needed) FB#246675 schmisc/perc/cell_tags_schmisc.perc - manual creation, can be empty if not used schmisc/perc/amp;cellname;/P1/amp;cellname;.perc.log (optional files, no check and checksum needed) FB#287784 schmisc/perc/amp;cellname;/P1/amp;cellname;.perc.rep schmisc/perc/amp;cellname;/P1/amp;cellname;.signal.txt schmisc/perc/amp;cellname;/P1/amp;cellname;.power.txt schmisc/perc/amp;cellname;/P1/amp;cellname;.drd.dump.powertable.tcl schmisc/perc/amp;cellname;/P1/amp;cellname;.any.txt schmisc/perc/amp;cellname;/P1/amp;cellname;.lownom.txt schmisc/perc/amp;cellname;/P1/amp;cellname;.nom.txt schmisc/perc/amp;cellname;/P1/amp;cellname;.nv.txt schmisc/perc/amp;cellname;/P1/amp;cellname;.hv.txt schmisc/perc/amp;cellname;/P1/amp;cellname;.ehv.txt schmisc/perc/amp;cellname;/P1/amp;cellname;.uhv.txt schmisc/perc/amp;cellname;/P1/hvlist/*.txt (optional files, no check and checksum needed) schmisc/perc/amp;cellname;/P1/hvlist/*.tcl (optional files, no check and checksum needed) 2. Physical (ICF HV flow, and layout critical signal flow) schmisc/physical/amp;cell_name;_critical_design_spec.xlsx - can be a dummy file if not used. schmisc/physical/ECO_indicator.xlsx - can be empty file if not used 3. RV schmisc/rv/amp;cellname;.power_budget.csv schmisc/rv/amp;cellname;.spi 4. RCXT schmisc/rcxt/rcxt_non_timing_skipcells.txt (optional file) 5. cell_type/cell_type.txt defines cell type for PnR. (optioanl file) DOC: http://rd/ice/product/Nadder/NadderPlanning/Shared%20Documents/Release%20Management/Deliverables/SCHMISC_Definition.docx
    </description>
    <pattern id="crtsign" mimetype="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet">
      ip_name;/schmisc/physical/cell_name;_critical_design_spec.xlsx
    </pattern>
    <pattern id="eco" mimetype="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet">
      ip_name;/schmisc/physical/ECO_indicator.xlsx
    </pattern>
    <pattern id="perc">
      ip_name;/schmisc/perc/cell_tags_schmisc.perc
    </pattern>
    <pattern id="waiver" minimum="0">
      ip_name;/schmisc/perc/*.waiver
    </pattern>
    <pattern id="checker_csv" mimetype="text/csv" minimum="0">
      ip_name;/schmisc/perc/*.perc_glitch_checker.csv
    </pattern>
    <pattern id="log" minimum="0">
      ip_name;/schmisc/perc/*/P1/*.perc.log
    </pattern>
    <pattern id="rep">
      ip_name;/schmisc/perc/*/P1/*.perc.rep
    </pattern>
    <pattern id="sgn">
      ip_name;/schmisc/perc/*/P1/*.signal.txt
    </pattern>
    <pattern id="ptxt">
      ip_name;/schmisc/perc/*/P1/*.power.txt
    </pattern>
    <pattern id="pwr">
      ip_name;/schmisc/perc/*/P1/*.drd.dump.powertable.tcl
    </pattern>
    <pattern id="anytxt">
      ip_name;/schmisc/perc/*/P1/*.any.txt
    </pattern>
    <pattern id="lownomtxt">
      ip_name;/schmisc/perc/*/P1/*.lownom.txt
    </pattern>
    <pattern id="nomtxt">
      ip_name;/schmisc/perc/*/P1/*.nom.txt
    </pattern>
    <pattern id="nvtxt">
      ip_name;/schmisc/perc/*/P1/*.nv.txt
    </pattern>
    <pattern id="hvtxt">
      ip_name;/schmisc/perc/*/P1/*.hv.txt
    </pattern>
    <pattern id="ehvtxt">
      ip_name;/schmisc/perc/*/P1/*.ehv.txt
    </pattern>
    <pattern id="uhvtxt">
      ip_name;/schmisc/perc/*/P1/*.uhv.txt
    </pattern>
    <pattern id="hvlisttxt" minimum="0">
      ip_name;/schmisc/perc/*/P1/hvlist/*.txt
    </pattern>
    <pattern id="hvlisttcl" minimum="0">
      ip_name;/schmisc/perc/*/P1/hvlist/*.tcl
    </pattern>
    <pattern id="rvcsv" mimetype="text/csv">
      ip_name;/schmisc/rv/*.power_budget.csv
    </pattern>
    <pattern id="rvspi">
      ip_name;/schmisc/rv/*.spi
    </pattern>
    <pattern id="rcxtfile" minimum="0">
      ip_name;/schmisc/rcxt/rcxt_non_timing_skipcells.txt
    </pattern>
    <pattern id="celltype" minimum="0">
      ip_name;/schmisc/cell_type/cell_type.txt
    </pattern>
    <producer id="ICD-IP"/>
    <consumer id="ICD-PD"/>
    <consumer id="LAY-IP"/>
  </template>
  <template caseid="209770" id="SDF">
    <description>
      SDF is used to define cell and net delays for paths in ASIC style design. This format has a limited use model in that only TD would be consuming the SDF files. Two sets, one at the fastest ICE (PVT) corner and another at the slowest ICE corner. A dominant corner for fast and slow will be picked for SDF generation flow. Note: Dominant corners in the INTEL process are NOT guaranteed to show ALL violations! DOC: http://rd/ice/product/Nadder/NadderPlanning/Shared%20Documents/Release%20Management/Deliverables/SDF_Definition.docx
    </description>
    <pattern id="file">
      ip_name;/sdf/results/cell_name;.*.sdf
    </pattern>
    <producer id="ICD-IP"/>
    <consumer id="ICD-PD"/>
    <consumer id="IPD"/>
    <consumer id="SOFTWARE"/>
  </template>
  <template caseid="82023" id="STA">
    <description>
      The STA is a placeholder for timing flow at this time. DOC: http://rd/ice/product/Nadder/NadderPlanning/Shared%20Documents/Release%20Management/Deliverables/STA_Definition.docx
    </description>
    <pattern id="list" minimum="0">
      ip_name;/sta/results/*/cell_name;.opin_c_total.list
    </pattern>
    <pattern id="ipf" minimum="0">
      ip_name;/sta/results/*/cell_name;.ptpx.ipf
    </pattern>
    <pattern id="timing" minimum="0">
      ip_name;/sta/results/*/cell_name;.timing
    </pattern>
    <pattern id="analysis" minimum="0">
      ip_name;/sta/results/*/*.report_analysis_coverage
    </pattern>
    <pattern id="aocvm" minimum="0">
      ip_name;/sta/results/*/*.report_aocvm
    </pattern>
    <pattern id="annotated" minimum="0">
      ip_name;/sta/results/*/*.report_annotated_parasitics
    </pattern>
    <pattern id="check_timing" minimum="0">
      ip_name;/sta/results/*/*.check_timing
    </pattern>
    <pattern id="log" minimum="0">
      ip_name;/sta/results/*/read_parasitic.*.log
    </pattern>
    <producer id="ICD-IP"/>
    <consumer id="SPNR"/>
    <consumer id="ICD-PD"/>
  </template>
  <template caseid="205455" id="STAMOD">
    <description>
      The STAMOD deliverable is required to run STA with PrimeTime. The models will be in both NLDM and CCS formats, and support noise, power. The timing arcs will be CRAM configuration based and not MODE based. DOC: http://rd/ice/product/Nadder/NadderPlanning/Shared%20Documents/Release%20Management/Deliverables/STAMOD_Definition.docx
    </description>
    <pattern id="ccslib">
      ip_name;/stamod/*/lib/ccs/*.lib
    </pattern>
    <pattern id="ccsdb" mimetype="application/octet-stream">
      ip_name;/stamod/*/lib/ccs/*.db
    </pattern>
    <pattern id="nlib">
      ip_name;/stamod/*/lib/nldm/*.lib
    </pattern>
    <pattern id="ndb" mimetype="application/octet-stream">
      ip_name;/stamod/*/lib/nldm/*.db
    </pattern>
    <pattern id="spf">
      ip_name;/stamod/*/spf/*.spf
    </pattern>
    <pattern id="vfile">
      ip_name;/stamod/*/verilog/*.v
    </pattern>
    <producer id="ICD-IP"/>
    <consumer id="IPD"/>
    <consumer id="SOFTWARE"/>
  </template>
  <template caseid="205456" id="SYN">
    <description>
      This deliverable captures all the output collateral from the SYN flow Currently Nadder uses R2G2 as the POR tool/flow in this space and that flow is setup to populate data in these ICM deliverable directories. DOC: http://rd/ice/product/Nadder/NadderPlanning/Shared%20Documents/Release%20Management/Deliverables/SYN_Definition.docx
    </description>
    <pattern id="syn_v">
      ip_name;/syn/results/netlist/cell_name;.syn.v
    </pattern>
    <pattern id="sdc">
      ip_name;/syn/results/sdc/*.sdc
    </pattern>
    <pattern id="upf_results">
      ip_name;/syn/results/upf/cell_name;.syn.upf
    </pattern>
    <pattern id="ddc" mimetype="application/octet-stream" minimum="0">
      ip_name;/syn/results/ddc/cell_name;.syn.ddc
    </pattern>
    <pattern id="tcl" minimum="0">
      ip_name;/syn/results/fe_gln_constraints/cell_name;.fe_gln_inst_map.tcl
    </pattern>
    <producer id="ICD-IP"/>
    <consumer id="SPNR"/>
  </template>
  <template caseid="205457" id="TIMEMOD">
    <description>
      The TIMEMODEL deliverable exists to capture the timing collateral needed for Quartus and Global timing closure. This deliverable was originally named iptimemod in the 20nm projects. The directory structure for the TIMEMODEL deliverable can be found at: http://rd/ice/product/Nadder/Timing/SitePages/Timing%20Collateral%20Naming%20Conventions.aspx Nadder Timing Sharepoint is available at: http://rd/ice/product/Nadder/Timing/SitePages/Home.aspx General overview of delivery requirements for each stage is available at: http://rd/ice/product/Nadder/Timing/SitePages/Timing%20Collateral%20Deliveries.aspx TIMEMOD delivery instructions for placeholder collateral is available at: http://rd/ice/product/Nadder/Timing/SitePages/Delivering%20Placeholder%20Timing%20Collateral.aspx In addition, ASIC flow derived models are stored in the stage_named/ilib subdir. These follow ICF naming conventions and the merged version will be mapped to BIN names prior to delivery to Quartus. Proposed names: Libs named: amp;cell_name.lt;cornergt;.lt;parasitics_cornergt;.lt;modegt;.lib Merged libs: amp;cell_name.lt;cornergt;.lt;parasitics_cornergt;.merged.lib Users should ensure that the list text files are saved with UNIX-style line endings and not Windows-style line endings. Most modern text editors can translate the format for you. DOC: http://rd/ice/product/Nadder/NadderPlanning/Shared%20Documents/Release%20Management/Deliverables/TIMEMOD_Definition.docx
    </description>
    <filelist id="filelist">
      ip_name;/timemod/ip_name;.*.timemod.filelist
    </filelist>
    <pattern id="ilib" minimum="0">
      ip_name;/timemod/*/ilib/cell_name;.*.lib
    </pattern>
    <pattern id="lib" minimum="0">
      ip_name;/timemod/*/lib/*.lib
    </pattern>
    <pattern id="spef" minimum="0">
      ip_name;/timemod/*/spef/*.spef.gz
    </pattern>
    <pattern id="fspef" minimum="0">
      ip_name;/timemod/*/spef/*.speflist.f
    </pattern>
    <pattern id="spef_mapping" mimetype="text/csv" minimum="0">
      ip_name;/timemod/*/spef/*.spef_mapping.csv
    </pattern>
    <pattern id="verilog" minimum="0">
      ip_name;/timemod/*/verilog/*.v
    </pattern>
    <pattern id="verilogflist" minimum="0">
      ip_name;/timemod/*/verilog/*.f
    </pattern>
    <pattern id="sdc" minimum="0">
      ip_name;/timemod/*/sdc/*.sdc
    </pattern>
    <pattern id="spf" minimum="0">
      ip_name;/timemod/*/spf/*.spf
    </pattern>
    <pattern id="rtl2lib" minimum="0">
      ip_name;/timemod/placeholder/rtl2lib/*
    </pattern>
    <pattern id="bom" minimum="0">
      ip_name;/timemod/*.bom.cfg
    </pattern>
    <pattern id="fverilog" minimum="0">
      ip_name;/timemod/*/fverilog/*.v
    </pattern>
    <pattern id="fvspef" minimum="0">
      ip_name;/timemod/*/fverilog/*.spef.gz
    </pattern>
    <pattern id="fverilogflist" minimum="0">
      ip_name;/timemod/*/fverilog/*.f
    </pattern>
    <pattern id="fverilogspeflist" minimum="0">
      ip_name;/timemod/*/fverilog/*.speflist.f
    </pattern>
    <pattern id="fsdc" minimum="0">
      ip_name;/timemod/*/fverilog/*.sdc
    </pattern>
    <pattern id="script_pl" minimum="0">
      ip_name;/timemod/*/scripts/*.pl
    </pattern>
    <pattern id="script_py" mimetype="text/x-python" minimum="0">
      ip_name;/timemod/*/scripts/*.py
    </pattern>
    <pattern id="script_csh" mimetype="application/x-csh" minimum="0">
      ip_name;/timemod/*/scripts/*.csh
    </pattern>
    <pattern id="script_tcl" minimum="0">
      ip_name;/timemod/*/scripts/*.tcl
    </pattern>
    <pattern id="script_sh" mimetype="application/x-sh" minimum="0">
      ip_name;/timemod/*/scripts/*.sh
    </pattern>
    <pattern id="oas" mimetype="application/octet-stream" minimum="0">
      ip_name;/timemod/*/oasis/*.oas
    </pattern>
    <pattern id="cdl" minimum="0">
      ip_name;/timemod/*/cdl/*.cdl
    </pattern>
    <producer id="ICD-IP"/>
    <consumer id="IPD"/>
    <consumer id="SOFTWARE"/>
    <consumer id="IP-DV"/>
    <consumer id="FCV"/>
  </template>
  <template caseid="255069" id="TRACKPHYS">
    <description>
      TRACKPHYS deliverable will be used to contain physical track assignment for signals and power pins. TRACKPHYS deliverable will also be used to assign track pattern for IPs that will go through DMZ for track assignment. Background: DMZ is used to assign physical tracks to signals and power interfaces. The source of where each of the signals and power needs to be on will be stored track/trackassignment. Before a signal can be assigned to a track, the track pattern type must be known; stored in track/trackpattern. Otherwise, a track number is useless. TRACKPHYS will contain Excel spreadsheets. The content of the Excel spreadsheet will be converted to text files which will be used when invoking DMZ. The TRACKPHYS deliverable resides in the special physintspec variant. DOC: http://rd/ice/product/Nadder/NadderPlanning/Shared%20Documents/Release%20Management/Deliverables/TRACKPHYS_Definition.docx
    </description>
    <pattern id="agmnd" mimetype="application/vnd.ms-excel.sheet.macroEnabled.12">
      ip_name;/trackphys/trackassignment/excel/ND*.xlsm
    </pattern>
    <pattern id="gtp" mimetype="application/vnd.ms-excel.sheet.macroEnabled.12">
      ip_name;/trackphys/trackassignment/excel/GenerateTrackPattern.xlsm
    </pattern>
    <pattern id="agmtcl">
      ip_name;/trackphys/trackassignment/tcl/*.track.tcl
    </pattern>
    <pattern id="ptnnd" mimetype="application/vnd.ms-excel.sheet.macroEnabled.12">
      ip_name;/trackphys/trackpattern/excel/NDTrackPattern.xlsm
    </pattern>
    <pattern id="ptntcl">
      ip_name;/trackphys/trackpattern/tcl/trackpattern.tcl
    </pattern>
    <producer id="ICD-IP"/>
    <consumer id="ICD-PD"/>
  </template>
  <template caseid="209037" id="UPF">
    <description>
      This deliverable contains all the IP level UPF files. UPF is 'Unified Power Format' file which specifies the power intent of each IP block. This also contains the '.lib' files which are compatible with the UPF files per IP. There should be a separate directory underneath called 'Verdi' for running and debugging VSI-LP tool. following files are required for all IPs: amp;ip_name;/upf/netlist/amp;cell_name;.upf amp;ip_name;/upf/netlist/amp;cell_name;.vsi.tcl amp;ip_name;/upf/netlist/reports/amp;cell_name;.report_lp.rpt amp;ip_name;/upf/netlist/reports/amp;cell_name;.report_lp.filtered.rpt amp;ip_name;/upf/netlist/reports/amp;cell_name;.report_lp.waive.rpt amp;ip_name;/upf/netlist/perc/amp;cell_name;.signal.powertable.tcl amp;ip_name;/upf/netlist/perc/amp;cell_name;.cell_tags_upf.perc following files are required for ASIC IPs: amp;ip_name;/upf/rtl/amp;cell_name;.upf amp;ip_name;/upf/rtl/amp;cell_name;.vsi.tcl amp;ip_name;/upf/rtl/reports/amp;cell_name;.report_lp.rpt amp;ip_name;/upf/rtl/reports/amp;cell_name;.report_lp.filtered.rpt amp;ip_name;/upf/rtl/reports/amp;cell_name;.report_lp.waive.rpt following files are reuired for CUSTOM IPs: amp;ip_name;/upf/netlist/amp;cell_name;.v amp;ip_name;/upf/netlist/amp;cell_name;.lib amp;ip_name;/upf/netlist/amp;cell_name;.ldb Since we have problem to distinguish it, all of exclusives are mark as optional. DOC: http://rd/ice/product/Nadder/NadderPlanning/Shared%20Documents/Release%20Management/Deliverables/UPF_Definition.docx
    </description>
    <pattern id="tcl_file" minimum="0">
      ip_name;/upf/rtl/*.vsi.tcl
    </pattern>
    <pattern id="upf_rpt" minimum="0">
      ip_name;/upf/rtl/reports/*.report_lp.rpt
    </pattern>
    <pattern id="upf_rptfilter" minimum="0">
      ip_name;/upf/rtl/reports/*.report_lp.filtered.rpt
    </pattern>
    <pattern id="upf_rptwaiver" minimum="0">
      ip_name;/upf/rtl/reports/*.report_lp.waive.rpt
    </pattern>
    <pattern id="ntcl_file">
      ip_name;/upf/netlist/*.vsi.tcl
    </pattern>
    <pattern id="nupf_rpt">
      ip_name;/upf/netlist/reports/*.report_lp.rpt
    </pattern>
    <pattern id="nupf_rptfilter">
      ip_name;/upf/netlist/reports/*.report_lp.filtered.rpt
    </pattern>
    <pattern id="nupf_rptwaiver">
      ip_name;/upf/netlist/reports/*.report_lp.waive.rpt
    </pattern>
    <pattern id="npwrtble">
      ip_name;/upf/netlist/perc/*.signal.powertable.tcl
    </pattern>
    <pattern id="ptag">
      ip_name;/upf/netlist/perc/*.cell_tags_upf.perc
    </pattern>
    <pattern id="v_file" minimum="0">
      ip_name;/upf/netlist/*.v
    </pattern>
    <pattern id="upf_lib" minimum="0">
      ip_name;/upf/netlist/*.lib
    </pattern>
    <pattern id="upf_db" mimetype="application/octet-stream" minimum="0">
      ip_name;/upf/netlist/*.ldb
    </pattern>
    <producer id="ICD-IP"/>
    <consumer id="ICD-PD"/>
    <consumer id="SOFTWARE"/>
  </template>
  <template caseid="209703" id="UPFFC">
    <description>
      This deliverable contains all the IP level UPFFC files. UPFFC is 'Unified Power Format' file which specifies the power intent of each IP block. This also contains the '.lib' files which are compatible with the UPFFC files per IP. There should be a separate directory underneath called 'Verdi' for running and debugging VSI-LP tool. DOC: http://rd/ice/product/Nadder/NadderPlanning/Shared%20Documents/Release%20Management/Deliverables/UPFFC_Definition.docx
    </description>
    <pattern id="topupf">
      ip_name;/upffc/top.upf
    </pattern>
    <pattern id="pinupf">
      ip_name;/upffc/pin.upf
    </pattern>
    <pattern id="upf_rpt">
      ip_name;/upffc/Verdi/reports/report_lp.rpt
    </pattern>
    <pattern id="upf_rptfilter">
      ip_name;/upffc/Verdi/reports/report_lp.filtered.rpt
    </pattern>
    <producer id="ICD-IP"/>
    <consumer id="ICD-PD"/>
    <consumer id="SOFTWARE"/>
  </template>
  <template caseid="209041" id="YX2GLN">
    <description>
      YX is an abstraction tool that used to translate the transistor netlist into Gate level model for ATPG and LEC usage DOC: http://rd/ice/product/Nadder/NadderPlanning/Shared%20Documents/Release%20Management/Deliverables/YX2GLN_Definition.docx
    </description>
    <pattern id="tf">
      ip_name;/yx2gln/directives/cell_name;.xe_tf
    </pattern>
    <pattern id="ud">
      ip_name;/yx2gln/directives/cell_name;.xe_ud
    </pattern>
    <pattern id="atpgud">
      ip_name;/yx2gln/directives/cell_name;_atpg.xe_ud
    </pattern>
    <pattern id="lecud">
      ip_name;/yx2gln/directives/cell_name;_lec.xe_ud
    </pattern>
    <pattern id="lmv">
      ip_name;/yx2gln/ATPG_model/cell_name;/cell_name;.xe_lm_v
    </pattern>
    <pattern id="flatud">
      ip_name;/yx2gln/ATPG_model/cell_name;/cell_name;.xe_flattened_ud
    </pattern>
    <pattern id="report">
      ip_name;/yx2gln/ATPG_model/cell_name;/cell_name;.xe_report
    </pattern>
    <pattern id="imap">
      ip_name;/yx2gln/ATPG_model/cell_name;/cell_name;.xe_lm_inst_map
    </pattern>
    <pattern id="nmap">
      ip_name;/yx2gln/ATPG_model/cell_name;/cell_name;.xe_lm_net_map
    </pattern>
    <pattern id="log">
      ip_name;/yx2gln/ATPG_model/cell_name;/cell_name;.xe_log
    </pattern>
    <pattern id="alog">
      ip_name;/yx2gln/ATPG_model/cell_name;/cell_name;_summary.log
    </pattern>
    <pattern id="llmv">
      ip_name;/yx2gln/LEC_model/cell_name;/cell_name;.xe_lm_v
    </pattern>
    <pattern id="lflatud">
      ip_name;/yx2gln/LEC_model/cell_name;/cell_name;.xe_flattened_ud
    </pattern>
    <pattern id="lreport">
      ip_name;/yx2gln/LEC_model/cell_name;/cell_name;.xe_report
    </pattern>
    <pattern id="limap">
      ip_name;/yx2gln/LEC_model/cell_name;/cell_name;.xe_lm_inst_map
    </pattern>
    <pattern id="lnmap">
      ip_name;/yx2gln/LEC_model/cell_name;/cell_name;.xe_lm_net_map
    </pattern>
    <pattern id="llog">
      ip_name;/yx2gln/LEC_model/cell_name;/cell_name;.xe_log
    </pattern>
    <pattern id="lalog">
      ip_name;/yx2gln/LEC_model/cell_name;/cell_name;_summary.log
    </pattern>
    <producer id="ICD-IP"/>
    <consumer id="SPNR"/>
    <consumer id="TE"/>
  </template>
  <successor id="BCMRBC"/>
  <successor id="CDC">
    <predecessor>
      BCMRBC
    </predecessor>
    <predecessor>
      RTL
    </predecessor>
  </successor>
  <successor id="CDL">
    <predecessor>
      OA
    </predecessor>
  </successor>
  <successor id="CIRCUITSIM">
    <predecessor>
      OA
    </predecessor>
  </successor>
  <successor id="COMPLIB">
    <predecessor>
      RTL
    </predecessor>
    <predecessor>
      INTFC
    </predecessor>
  </successor>
  <successor id="COMPLIBPHYS">
    <predecessor>
      COMPLIB
    </predecessor>
    <predecessor>
      TRACKPHYS
    </predecessor>
  </successor>
  <successor id="CVIMPL">
    <predecessor>
      CVRTL
    </predecessor>
    <predecessor>
      RTL
    </predecessor>
    <predecessor>
      SYN
    </predecessor>
  </successor>
  <successor id="CVRTL">
    <predecessor>
      RTL
    </predecessor>
  </successor>
  <successor id="CVSIGNOFF">
    <predecessor>
      CVRTL
    </predecessor>
    <predecessor>
      RTL
    </predecessor>
  </successor>
  <successor id="DFTDSM">
    <predecessor>
      RTL
    </predecessor>
  </successor>
  <successor id="DV">
    <predecessor>
      INTERRBA
    </predecessor>
    <predecessor>
      NETLIST
    </predecessor>
    <predecessor>
      PNR
    </predecessor>
    <predecessor>
      RDF
    </predecessor>
    <predecessor>
      RTL
    </predecessor>
  </successor>
  <successor id="FCPWRMOD">
    <predecessor>
      IPPWRMOD
    </predecessor>
  </successor>
  <successor id="FV">
    <predecessor>
      RTL
    </predecessor>
    <predecessor>
      OA
    </predecessor>
    <predecessor>
      YX2GLN
    </predecessor>
  </successor>
  <successor id="FVPNR">
    <predecessor>
      PNR
    </predecessor>
    <predecessor>
      SYN
    </predecessor>
  </successor>
  <successor id="FVSYN">
    <predecessor>
      RTL
    </predecessor>
    <predecessor>
      SYN
    </predecessor>
  </successor>
  <successor id="GP">
    <predecessor>
      RTL
    </predecessor>
    <predecessor>
      RDF
    </predecessor>
    <predecessor>
      BCMRBC
    </predecessor>
  </successor>
  <successor id="INTERRBA">
    <predecessor>
      RTL
    </predecessor>
  </successor>
  <successor id="INTFC"/>
  <successor id="IPFLOORPLAN">
    <predecessor>
      OA
    </predecessor>
  </successor>
  <successor id="IPPWRMOD">
    <predecessor>
      BCMRBC
    </predecessor>
    <predecessor>
      RCXT
    </predecessor>
  </successor>
  <successor id="IPSPEC"/>
  <successor id="IPXACT">
    <predecessor>
      RTL
    </predecessor>
  </successor>
  <successor id="LAYMISC">
    <predecessor>
      PV
    </predecessor>
  </successor>
  <successor id="LINT">
    <predecessor>
      RTL
    </predecessor>
  </successor>
  <successor id="MW">
    <predecessor>
      COMPLIB
    </predecessor>
    <predecessor>
      IPFLOORPLAN
    </predecessor>
  </successor>
  <successor id="NETLIST">
    <predecessor>
      COMPLIB
    </predecessor>
  </successor>
  <successor id="OA">
    <predecessor>
      NETLIST
    </predecessor>
    <predecessor>
      PNR
    </predecessor>
    <predecessor>
      RTL
    </predecessor>
  </successor>
  <successor id="OASIS">
    <predecessor>
      MW
    </predecessor>
    <predecessor>
      NETLIST
    </predecessor>
    <predecessor>
      OA
    </predecessor>
    <predecessor>
      PNR
    </predecessor>
  </successor>
  <successor id="OA_SIM"/>
  <successor id="PERIODICTST"/>
  <successor id="PINTABLE"/>
  <successor id="PKGDE">
    <predecessor>
      PINTABLE
    </predecessor>
  </successor>
  <successor id="PKGEE">
    <predecessor>
      PINTABLE
    </predecessor>
  </successor>
  <successor id="PNR">
    <predecessor>
      CVIMPL
    </predecessor>
    <predecessor>
      SYN
    </predecessor>
  </successor>
  <successor id="PORTLIST"/>
  <successor id="PV">
    <predecessor>
      CDL
    </predecessor>
    <predecessor>
      OA
    </predecessor>
    <predecessor>
      OASIS
    </predecessor>
    <predecessor>
      SCHMISC
    </predecessor>
  </successor>
  <successor id="R2G2"/>
  <successor id="RCXT">
    <predecessor>
      CDL
    </predecessor>
    <predecessor>
      OASIS
    </predecessor>
  </successor>
  <successor id="RDF"/>
  <successor id="RELDOC"/>
  <successor id="RTL"/>
  <successor id="RTLCOMPCHK">
    <predecessor>
      RTL
    </predecessor>
  </successor>
  <successor id="RV">
    <predecessor>
      OASIS
    </predecessor>
    <predecessor>
      PNR
    </predecessor>
    <predecessor>
      RCXT
    </predecessor>
    <predecessor>
      SCHMISC
    </predecessor>
  </successor>
  <successor id="SCHMISC">
    <predecessor>
      CDL
    </predecessor>
    <predecessor>
      OA
    </predecessor>
    <predecessor>
      UPF
    </predecessor>
  </successor>
  <successor id="SDF">
    <predecessor>
      RCXT
    </predecessor>
    <predecessor>
      TIMEMOD
    </predecessor>
  </successor>
  <successor id="STA">
    <predecessor>
      PNR
    </predecessor>
    <predecessor>
      RCXT
    </predecessor>
    <predecessor>
      TIMEMOD
    </predecessor>
  </successor>
  <successor id="STAMOD"/>
  <successor id="SYN">
    <predecessor>
      CVRTL
    </predecessor>
    <predecessor>
      RTL
    </predecessor>
    <predecessor>
      UPF
    </predecessor>
  </successor>
  <successor id="TIMEMOD">
    <predecessor>
      CVSIGNOFF
    </predecessor>
    <predecessor>
      OA
    </predecessor>
    <predecessor>
      RCXT
    </predecessor>
    <predecessor>
      RTL
    </predecessor>
  </successor>
  <successor id="TRACKPHYS"/>
  <successor id="UPF">
    <predecessor>
      RTL
    </predecessor>
  </successor>
  <successor id="UPFFC">
    <predecessor>
      UPF
    </predecessor>
  </successor>
  <successor id="YX2GLN">
    <predecessor>
      OA
    </predecessor>
    <predecessor>
      RDF
    </predecessor>
  </successor>
  <alias id="FAKE">
    <member>
      BCMRBC
    </member>
    <member>
      CDC
    </member>
    <member>
      LINT
    </member>
  </alias>
</templateset>

